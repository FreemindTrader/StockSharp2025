// Decompiled with JetBrains decompiler
// Type: StockSharp.Fix.Dialects.IFixDialect
// Assembly: StockSharp.Fix.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9148E39-A5BB-4657-14B1-EA8DED27B1C2
// Assembly location: A:\StockSharpBin\Terminal\StockSharp.Fix.Core.dll

using Ecng.Common;
using Ecng.Serialization;
using StockSharp.Fix.Native;
using StockSharp.Logging;
using StockSharp.Messages;
using System;
using System.Net;
using System.Security;
using System.Text;

namespace StockSharp.Fix.Dialects
{
    /// <summary>
    /// The interface describing the dialect of the FIX protocol.
    /// </summary>
    public interface IFixDialect :
      ICloneable<IMessageChannel>,
      IMessageAdapter,
      IMessageChannel,
      IDisposable,
      ICloneable,
      IPersistable,
      ILogReceiver,
      ILogSource
    {
        /// <summary>FIX version.</summary>
        string Version { get; }

        /// <summary>Encoding.</summary>
        Encoding Encoding { get; set; }

        /// <summary>FIX protocol format.</summary>
        FixFormats Format { get; }

        /// <summary>Login.</summary>
        string Login { get; set; }

        /// <summary>Password.</summary>
        SecureString Password { get; set; }

        /// <summary>Sender ID.</summary>
        string SenderCompId { get; set; }

        /// <summary>Target ID.</summary>
        string TargetCompId { get; set; }

        /// <summary>Time stamp parser.</summary>
        FastDateTimeParser TimeStampParser { get; set; }

        /// <summary>Time parser.</summary>
        FastTimeSpanParser TimeParser { get; set; }

        /// <summary>Date parser.</summary>
        FastDateTimeParser DateParser { get; set; }

        /// <summary>Year and month parser.</summary>
        FastDateTimeParser YearMonthParser { get; set; }

        /// <summary>Should the sequence counter be reset.</summary>
        bool IsResetCounter { get; set; }

        /// <summary>Counter.</summary>
        long CurrentCounter { get; set; }

        /// <summary>
        /// Information about the time zone where the exchange is located.
        /// </summary>
        TimeZoneInfo TimeZone { get; set; }

        /// <summary>Board, where securities are traded.</summary>
        string ExchangeBoard { get; set; }

        /// <summary>Client code assigned by the broker.</summary>
        string ClientCode { get; set; }

        /// <summary>The recorder of data in the FIX protocol format.</summary>
        IFixWriter Writer { get; }

        /// <summary>
        /// The reader of data recorded in the FIX protocol format.
        /// </summary>
        IFixReader Reader { get; }

        /// <summary>
        /// Support executions processing, generated by third-party software.
        /// </summary>
        bool SupportUnknownExecutions { get; set; }

        /// <summary>Cancel On Disconnect.</summary>
        bool CancelOnDisconnect { get; set; }

        /// <summary>
        /// Do not send <see cref="F:StockSharp.Fix.Native.FixTags.Account" />.
        /// </summary>
        bool DoNotSendAccount { get; set; }

        /// <summary>
        /// Override <see cref="F:StockSharp.Fix.Native.ExecutionReport.ExecId" /> by native identifier (if present in FIX message).
        /// </summary>
        bool OverrideExecIdByNative { get; set; }

        /// <summary>Client app version.</summary>
        string ClientVersion { get; set; }

        /// <summary>Accounts associated with FIX login.</summary>
        string Accounts { get; set; }

        /// <summary>Initialize dialect.</summary>
        /// <param name="writer">The recorder of data in the FIX protocol format.</param>
        /// <param name="reader">The reader of data recorded in the FIX protocol format.</param>
        /// <param name="address">Server address.</param>
        void Init(IFixWriter writer, IFixReader reader, EndPoint address);

        /// <summary>Read next messages from FIX protocol.</summary>
        /// <param name="messageHandler">Message handler.</param>
        /// <returns>
        /// <see langword="true" /> if incoming messages was processed successfully, otherwise, <see langword="false" />.</returns>
        bool? Read(Action<Message> messageHandler);

        /// <summary>
        /// Try extract expected <see cref="F:StockSharp.Fix.Native.FixTags.MsgSeqNum" /> from the specified error message.
        /// </summary>
        /// <param name="errorMessage">Error message.</param>
        /// <returns>
        /// <see cref="F:StockSharp.Fix.Native.FixTags.MsgSeqNum" /> or <see langword="null" />.</returns>
        long? TryParseNextMsqSeqNum(string errorMessage);
    }
}
