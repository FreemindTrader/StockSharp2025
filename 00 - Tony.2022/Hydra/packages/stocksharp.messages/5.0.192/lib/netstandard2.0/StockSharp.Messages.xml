<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.Messages</name>
    </assembly>
    <members>
        <member name="T:StockSharp.Messages.AdapterListRequestMessage">
            <summary>
            Adapters list request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.AdapterListRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.AdapterListRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.AdapterListRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.AdapterListRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.AdapterListRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.AdapterResponseMessage">
            <summary>
            Adapter response message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.AdapterResponseMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.AdapterResponseMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.AdapterResponseMessage.AdapterId">
            <summary>
            Adapter identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.AdapterResponseMessage.Parameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.AdapterResponseMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.AdapterResponseMessage.CopyTo(StockSharp.Messages.AdapterResponseMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseChangeMessage`2">
            <summary>
            A message containing changes.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <typeparam name="TField">Changes type.</typeparam>
        </member>
        <member name="P:StockSharp.Messages.BaseChangeMessage`2.ServerTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseChangeMessage`2.BuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseChangeMessage`2.Changes">
            <summary>
            Changes.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseChangeMessage`2.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseChangeMessage`2"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseChangeMessage`2.CopyTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseChangeMessage`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseConnectionMessage">
            <summary>
            Base connect/disconnect message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseConnectionMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseConnectionMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseConnectionMessage.Error">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseConnectionMessage.CopyTo(StockSharp.Messages.BaseConnectionMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseConnectionMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseRequestMessage">
            <summary>
            Base implementation of <see cref="T:StockSharp.Messages.ISubscriptionMessage"/> interface with non-online mode.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseRequestMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BaseRequestMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseRequestMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseRequestMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseRequestMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseRequestMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseResultMessage`1">
            <summary>
            Base result message.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="M:StockSharp.Messages.BaseResultMessage`1.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BaseResultMessage`1"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseResultMessage`1.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseResultMessage`1.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.BaseResultMessage`1"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.BaseResultMessage`1.CopyTo(`0)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseResultMessage`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseRouteMessage`1">
            <summary>
            Base route response message.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="M:StockSharp.Messages.BaseRouteMessage`1.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseRouteMessage`1"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseRouteMessage`1.AdapterId">
            <summary>
            Adapter identifier.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseRouteMessage`1.CopyTo(`0)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BaseSubscriptionIdMessage`1">
            <summary>
            A message containing subscription identifiers.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionIdMessage`1.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionIdMessage`1.SubscriptionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionIdMessage`1.SubscriptionIds">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionIdMessage`1.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionIdMessage`1.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseSubscriptionIdMessage`1"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionIdMessage`1.CopyTo(`0)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionIdMessage`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionIdMessage`1.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.BaseSubscriptionIdMessage`1"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.BaseSubscriptionMessage">
            <summary>
            Base implementation of <see cref="T:StockSharp.Messages.ISubscriptionMessage"/> interface.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BaseSubscriptionMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.FilterEnabled">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.Skip">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.Count">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseSubscriptionMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionMessage.CopyTo(StockSharp.Messages.BaseSubscriptionMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="M:StockSharp.Messages.BaseSubscriptionMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BoardLookupMessage">
            <summary>
            Message boards lookup for specified criteria.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.Like">
            <summary>
            The filter for board search.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BoardLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BoardLookupMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BoardLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.BoardLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.BoardLookupMessage.CopyTo(StockSharp.Messages.BoardLookupMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="M:StockSharp.Messages.BoardLookupMessage.ToString">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BoardLookupMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BoardMessage">
            <summary>
            The message contains information about the electronic board.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.ExchangeCode">
            <summary>
            Exchange code, which owns the board. Maybe be the same <see cref="P:StockSharp.Messages.BoardMessage.Code"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.Code">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.ExpiryTime">
            <summary>
            Securities expiration times.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.WorkingTime">
            <summary>
            Board working hours.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.TimeZone">
            <summary>
            Information about the time zone where the exchange is located.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BoardMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.CopyTo(StockSharp.Messages.BoardMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SessionStates">
            <summary>
            Session states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Assigned">
            <summary>
            Session assigned. Cannot register new orders, but can cancel.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Active">
            <summary>
            Session active. Can register and cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Paused">
            <summary>
            Suspended. Cannot register new orders, but can cancel.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.ForceStopped">
            <summary>
            Rejected. Cannot register and cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Ended">
            <summary>
            Finished. Cannot register and cancel orders.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.BoardStateMessage">
            <summary>
            Session change changed message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BoardStateMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BoardStateMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardStateMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BoardStateMessage.BoardCode">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardStateMessage.State">
            <summary>
            Session state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardStateMessage.ServerTime">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BoardStateMessage.CopyTo(StockSharp.Messages.BoardStateMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.BoardStateMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.BuildCandlesFieldSource">
            <summary>
            Source for <see cref="P:StockSharp.Messages.MarketDataMessage.BuildField"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BuildCandlesFieldSource.GetValues">
            <summary>
            Get values.
            </summary>
            <returns>Values.</returns>
        </member>
        <member name="T:StockSharp.Messages.BuildCandlesFromSource">
            <summary>
            Source for <see cref="P:StockSharp.Messages.MarketDataMessage.BuildFrom"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BuildCandlesFromSource.GetValues">
            <summary>
            Get values.
            </summary>
            <returns>Values.</returns>
        </member>
        <member name="T:StockSharp.Messages.CandleStates">
            <summary>
            Candle states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.None">
            <summary>
            Empty state (candle doesn't exist).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.Active">
            <summary>
            Candle active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.Finished">
            <summary>
            Candle finished.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.CandleMessage">
            <summary>
            The message contains information about the candle.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenTime">
            <summary>
            Open time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighTime">
            <summary>
            Time of candle high.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowTime">
            <summary>
            Time of candle low.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.CloseTime">
            <summary>
            Close time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenPrice">
            <summary>
            Opening price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighPrice">
            <summary>
            Highest price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowPrice">
            <summary>
            Lowest price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.ClosePrice">
            <summary>
            Closing price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenVolume">
            <summary>
            Volume at open.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.CloseVolume">
            <summary>
            Volume at close.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighVolume">
            <summary>
            Volume at high.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowVolume">
            <summary>
            Volume at low.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.RelativeVolume">
            <summary>
            Relative volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalPrice">
            <summary>
            Total price size.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalVolume">
            <summary>
            Total volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalTicks">
            <summary>
            Number of ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.UpTicks">
            <summary>
            Number of up trending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.DownTicks">
            <summary>
            Number of down trending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.PriceLevels">
            <summary>
            Price levels.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.CloneArg">
            <summary>
            Clone <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.SubscriptionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.SubscriptionIds">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.BuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.SeqNum">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.CopyTo(StockSharp.Messages.CandleMessage)">
            <summary>
            Copy parameters.
            </summary>
            <param name="copy">Copy.</param>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.ToString">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.BatchStatus">
            <summary>
            State.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TimeFrameCandleMessage">
            <summary>
            The message contains information about the time-frame candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameCandleMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameCandleMessage.TimeFrame">
            <summary>
            Time-frame.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.TickCandleMessage">
            <summary>
            The message contains information about the tick candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TickCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TickCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TickCandleMessage.MaxTradeCount">
            <summary>
            Maximum tick count.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TickCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TickCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.TickCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.VolumeCandleMessage">
            <summary>
            The message contains information about the volume candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.VolumeCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.VolumeCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.VolumeCandleMessage.Volume">
            <summary>
            Maximum volume.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.VolumeCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.VolumeCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.VolumeCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.RangeCandleMessage">
            <summary>
            The message contains information about the range candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RangeCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RangeCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RangeCandleMessage.PriceRange">
            <summary>
            Range of price.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RangeCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RangeCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.RangeCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.RangeCandleMessage.CloneArg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.PnFArg">
            <summary>
            Point in figure (X0) candle arg.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFArg.BoxSize">
            <summary>
            Range of price above which increase the candle body.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFArg.ReversalAmount">
            <summary>
            The number of boxes required to cause a reversal.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PnFArg.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PnFArg"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.OnEquals(StockSharp.Messages.PnFArg)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.PnFArg"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.PnFArg"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:StockSharp.Messages.PnFCandleMessage">
            <summary>
            The message contains information about the X0 candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PnFCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFCandleMessage.PnFArg">
            <summary>
            Value of arguments.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PnFCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.PnFCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PnFCandleMessage.CloneArg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.RenkoCandleMessage">
            <summary>
            The message contains information about the renko candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RenkoCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RenkoCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RenkoCandleMessage.BoxSize">
            <summary>
            Possible price change range.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RenkoCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RenkoCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.RenkoCandleMessage.Arg">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.RenkoCandleMessage.CloneArg">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.HeikinAshiCandleMessage">
            <summary>
            The message contains information about the Heikin-Ashi candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.HeikinAshiCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.HeikinAshiCandleMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.HeikinAshiCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.HeikinAshiCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.CandlePriceLevel">
            <summary>
            The price level.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.Price">
            <summary>
            Price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.TotalVolume">
            <summary>
            The volume of bids and asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyVolume">
            <summary>
            The volume of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellVolume">
            <summary>
            The volume of asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyCount">
            <summary>
            The number of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellCount">
            <summary>
            The number of asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyVolumes">
            <summary>
            The volumes collection of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellVolumes">
            <summary>
            The volumes collection of asks.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ChangePasswordMessage">
            <summary>
            Change password message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.ChangePasswordMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ChangePasswordMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.Error">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.NewPassword">
            <summary>
            New password.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.OldPassword">
            <summary>
            Old password.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.CopyTo(StockSharp.Messages.ChangePasswordMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.ChannelMessageAdapter">
            <summary>
            Message adapter, forward messages through a transport channel <see cref="T:StockSharp.Messages.IMessageChannel"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.IMessageChannel,StockSharp.Messages.IMessageChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ChannelMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
            <param name="inputChannel">Incoming messages channel.</param>
            <param name="outputChannel">Outgoing message channel.</param>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.InputChannel">
            <summary>
            Adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OutputChannel">
            <summary>
            Adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OwnInputChannel">
            <summary>
            Control the lifetime of the incoming messages channel.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OwnOutputChannel">
            <summary>
            Control the lifetime of the outgoing messages channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.SendOutMessage(StockSharp.Messages.Message)">
            <summary>
            Send outgoing message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ChannelMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.CommandTypes">
            <summary>
            Command types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Stop">
            <summary>
            Stop.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Enable">
            <summary>
            Enable.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Disable">
            <summary>
            Disable.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Update">
            <summary>
            Update settings.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Add">
            <summary>
            Add.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Remove">
            <summary>
            Remove.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Get">
            <summary>
            Request current state.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.ClosePosition">
            <summary>
            Close position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.CancelOrders">
            <summary>
            Cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.RegisterOrder">
            <summary>
            Register new order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.CancelOrder">
            <summary>
            Cancel order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Restart">
            <summary>
            Restart.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.Share">
            <summary>
            Share.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.UnShare">
            <summary>
            Unshare.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandTypes.List">
            <summary>
            List objects.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.CommandScopes">
            <summary>
            Command scopes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Application">
            <summary>
            Application.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Adapter">
            <summary>
            Adapter.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Strategy">
            <summary>
            Strategy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Order">
            <summary>
            Order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.FileGroup">
            <summary>
            File group.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.Product">
            <summary>
            Product.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.License">
            <summary>
            License.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.LicenseFeature">
            <summary>
            License feature.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.ProductCategory">
            <summary>
            Product category.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.ProductPermission">
            <summary>
            Product permission.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CommandScopes.ProductFeedback">
            <summary>
            Product feedback.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.CommandMessage">
            <summary>
            The message contains information about command to change state.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CommandMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.CommandMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CommandMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.CommandMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.Command">
            <summary>
            Command.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.Scope">
            <summary>
            Scope.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.ObjectId">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.ObjectIdLong">
            <summary>
            <see cref="P:StockSharp.Messages.CommandMessage.ObjectId"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.Parameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CommandMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.CommandMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.CommandMessage.CopyTo(StockSharp.Messages.CommandMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="P:StockSharp.Messages.CommandMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.CommandMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.ConnectionStates">
            <summary>
            Connection states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Disconnected">
            <summary>
            Non active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Disconnecting">
            <summary>
            Disconnect pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Connecting">
            <summary>
            Connect pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Connected">
            <summary>
            Connection active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Failed">
            <summary>
            Error connection.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ConnectMessage">
            <summary>
            Connect to a server message (uses as a command in outgoing case, event in incoming case).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ConnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ConnectMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ConnectMessage.ClientVersion">
            <summary>
            Client app version.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ConnectMessage.SessionId">
            <summary>
            Optional server session id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ConnectMessage.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ConnectMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ConnectMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DataType.Create(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.DataType"/>.
            </summary>
            <param name="messageType">Message type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.Create(System.Type,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.DataType"/>.
            </summary>
            <param name="messageType">Message type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <param name="isSecurityRequired">Is the data type required security info.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.Immutable">
            <summary>
            Make immutable.
            </summary>
            <returns>Data type info.</returns>
        </member>
        <member name="P:StockSharp.Messages.DataType.Level1">
            <summary>
            Level1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.MarketDepth">
            <summary>
            Market depth.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.FilteredMarketDepth">
            <summary>
            Filtered market depth.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.PositionChanges">
            <summary>
            Position changes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Securities">
            <summary>
            Securities.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Ticks">
            <summary>
            Ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Transactions">
            <summary>
            Transactions.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Board">
            <summary>
            Board info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.BoardState">
            <summary>
            Board state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Users">
            <summary>
            User info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.TimeFrames">
            <summary>
            The candle time frames.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleTimeFrame">
            <summary>
            <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleVolume">
            <summary>
            <see cref="T:StockSharp.Messages.VolumeCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleTick">
            <summary>
            <see cref="T:StockSharp.Messages.TickCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleRange">
            <summary>
            <see cref="T:StockSharp.Messages.RangeCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleRenko">
            <summary>
            <see cref="T:StockSharp.Messages.RenkoCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandlePnF">
            <summary>
            <see cref="T:StockSharp.Messages.PnFCandleMessage"/> data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Adapters">
            <summary>
            Adapters.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.PortfolioRoute">
            <summary>
            Portfolio route.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.SecurityRoute">
            <summary>
            Security route.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.SecurityLegs">
            <summary>
            Security legs.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.SecurityMapping">
            <summary>
            Security mapping.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Command">
            <summary>
            <see cref="T:StockSharp.Messages.CommandMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DataType.TimeFrame(System.TimeSpan)">
            <summary>
            Create data type info for <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
            <param name="tf">Candle arg.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.Portfolio(System.String)">
            <summary>
            Create data type info for <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="P:StockSharp.Messages.DataType.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.Arg">
            <summary>
            The additional argument, associated with data. For example, candle argument.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DataType.OnEquals(StockSharp.Messages.DataType)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.DataType"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.DataType"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.DataType.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DataType.SetName(System.String)">
            <summary>
            Set <see cref="P:StockSharp.Messages.DataType.Name"/>.
            </summary>
            <param name="name">Name.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.DataType.ToString">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.DataType.IsCandles">
            <summary>
            Determines whether the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.IsPortfolio">
            <summary>
            Determines whether the specified message type is derived from <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.IsMarketData">
            <summary>
            Determines whether the specified message type is market-data.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.IsSecurityRequired">
            <summary>
            Is the data type required security info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.IsCandleSource">
            <summary>
            Is the data type can be used as candles compression source.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.DataType.CandleSources">
            <summary>
            Possible data types that can be used as candles source.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DataType.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.DataType.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.DisconnectMessage">
            <summary>
            Disconnect from a server message (uses as a command in outgoing case, event in incoming case).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DisconnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.DisconnectMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DisconnectMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.DisconnectMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ErrorMessage.Error">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ErrorMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ExecutionTypes">
            <summary>
            The types of data that contain information in <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Tick">
            <summary>
            Tick trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Transaction">
            <summary>
            Transaction.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Obsolete">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ExecutionMessage">
            <summary>
            The message contains information about the execution.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PortfolioName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.BrokerCode">
            <summary>
            Broker firm code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ServerTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ExecutionType">
            <summary>
            Data type, information about which is contained in the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsCancellation">
            <summary>
            Is the action an order cancellation.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderId">
            <summary>
            Order ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderStringId">
            <summary>
            Order ID (as string, if electronic board does not use numeric order ID representation).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderBoardId">
            <summary>
            Board order id. Uses in case of <see cref="P:StockSharp.Messages.ExecutionMessage.OrderId"/> and <see cref="P:StockSharp.Messages.ExecutionMessage.OrderStringId"/> is a brokerage system ids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.HasOrderInfo">
            <summary>
            Is the message contains order info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.HasTradeInfo">
            <summary>
            Is the message contains trade info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderPrice">
            <summary>
            Order price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderVolume">
            <summary>
            Number of contracts in the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeVolume">
            <summary>
            Number of contracts in the trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.VisibleVolume">
            <summary>
            Visible quantity of contracts in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Side">
            <summary>
            Order side (buy or sell).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Balance">
            <summary>
            Order contracts balance.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderStatus">
            <summary>
            System order status.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderState">
            <summary>
            Order state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Comment">
            <summary>
            Placed order comment.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.SystemComment">
            <summary>
            Message for order (created by the trading system when registered, changed or cancelled).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsSystem">
            <summary>
            Is a system trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ExpiryDate">
            <summary>
            Order expiry time. The default is <see langword="null" />, which mean (GTC).
            </summary>
            <remarks>
            If the value is equal <see langword="null" />, order will be GTC (good til cancel). Or uses exact date.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TimeInForce">
            <summary>
            Limit order execution condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeId">
            <summary>
            Trade ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeStringId">
            <summary>
            Trade ID (as string, if electronic board does not use numeric order ID representation).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradePrice">
            <summary>
            Trade price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeStatus">
            <summary>
            System trade status.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OriginSide">
            <summary>
            Deal initiator (seller or buyer).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OpenInterest">
            <summary>
            Number of open positions (open interest).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Error">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Condition">
            <summary>
            Order condition (e.g., stop- and algo- orders parameters).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsUpTick">
            <summary>
            Is tick uptrend or downtrend in price. Uses only <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> for <see cref="F:StockSharp.Messages.ExecutionTypes.Tick"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Commission">
            <summary>
            Commission (broker, exchange etc.). Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.CommissionCurrency">
            <summary>
            Commission currency. Can be <see lnagword="null"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Latency">
            <summary>
            Network latency. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Slippage">
            <summary>
            Slippage in trade price. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.UserOrderId">
            <summary>
            User order id. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.StrategyId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PnL">
            <summary>
            The profit, realized by trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Position">
            <summary>
            The position, generated by order or trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsMarketMaker">
            <summary>
            Is the order of market-maker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsMargin">
            <summary>
            Is margin enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsManual">
            <summary>
            Is order manual.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.AveragePrice">
            <summary>
            Average execution price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Yield">
            <summary>
            Yield.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.MinVolume">
            <summary>
            Minimum quantity of an order to be executed.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PositionEffect">
            <summary>
            Position effect.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PostOnly">
            <summary>
            Post-only order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Initiator">
            <summary>
            Used to identify whether the order initiator is an aggressor or not in the trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.SeqNum">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.BuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Leverage">
            <summary>
            Margin leverage.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderBuyId">
            <summary>
            Order id (buy).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderSellId">
            <summary>
            Order id (sell).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.CopyTo(StockSharp.Messages.ExecutionMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.Extensions">
            <summary>
            Extension class.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreatePortfolioChangeMessage(StockSharp.Messages.IMessageAdapter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="pfName">Portfolio name.</param>
            <returns>Portfolio change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreatePositionChangeMessage(StockSharp.Messages.IMessageAdapter,System.String,StockSharp.Messages.SecurityId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="pfName">Portfolio name.</param>
            <param name="securityId">Security ID.</param>
            <param name="depoName">The depositary where the physical security.</param>
            <returns>Position change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBestBid(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Get best bid.
            </summary>
            <param name="message">Market depth.</param>
            <returns>Best bid, or <see langword="null" />, if no bids are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBestAsk(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Get best ask.
            </summary>
            <param name="message">Market depth.</param>
            <returns>Best ask, or <see langword="null" />, if no asks are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSpreadMiddle(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Get middle of spread.
            </summary>
            <param name="message">Market depth.</param>
            <returns>The middle of spread. Is <see langword="null" />, if quotes are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSpreadMiddle(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            Get middle of spread.
            </summary>
            <param name="message">Market depth.</param>
            <returns>The middle of spread. Is <see langword="null" />, if quotes are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSpreadMiddle(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            Get middle of spread.
            </summary>
            <param name="bestBidPrice">Best bid price.</param>
            <param name="bestAskPrice">Best ask price.</param>
            <returns>The middle of spread. Is <see langword="null" />, if quotes are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSpreadMiddle(System.Decimal,System.Decimal)">
            <summary>
            Get middle of spread.
            </summary>
            <param name="bestBidPrice">Best bid price.</param>
            <param name="bestAskPrice">Best ask price.</param>
            <returns>The middle of spread. Is <see langword="null" />, if quotes are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetLastTradePrice(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            Get last tick trade price.
            </summary>
            <param name="message">Market depth.</param>
            <returns>The middle of spread. Is <see langword="null" />, if quotes are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateReply(StockSharp.Messages.OrderMessage,System.Exception)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.OrderMessage"/> to the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.OrderMessage"/>.</param>
            <param name="error">Error info.</param>
            <returns><see cref="T:StockSharp.Messages.ExecutionMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateOrderReply(System.Int64,System.DateTimeOffset)">
            <summary>
            Create order's transaction reply.
            </summary>
            <param name="transactionId">Transaction ID.</param>
            <param name="serverTime">Server time.</param>
            <returns>The message contains information about the execution.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CopyExtensionInfo(StockSharp.Messages.IExtendableEntity,StockSharp.Messages.IExtendableEntity)">
            <summary>
            Copy extended info.
            </summary>
            <param name="from">The object of which is copied to extended information.</param>
            <param name="to">The object, which is copied to extended information.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetServerTime(StockSharp.Messages.Message)">
            <summary>
            Get message server time.
            </summary>
            <param name="message">Message.</param>
            <returns>Server time.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGetServerTime(StockSharp.Messages.Message)">
            <summary>
            Get message server time.
            </summary>
            <param name="message">Message.</param>
            <returns>Server time. If the value is <see langword="null" />, the message does not contain the server time.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToInfo(StockSharp.Messages.MessageTypes,System.Nullable{System.Boolean})">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MessageTypes"/> to <see cref="T:StockSharp.Messages.MessageTypeInfo"/> value.
            </summary>
            <param name="type"><see cref="T:StockSharp.Messages.MessageTypes"/> value.</param>
            <param name="isMarketData">Market data.</param>
            <returns><see cref="T:StockSharp.Messages.MessageTypeInfo"/> value.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.TransactionalMessageTypes">
            <summary>
            Transactional message types.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddTransactionalSupport(StockSharp.Messages.MessageAdapter)">
            <summary>
            Fill the <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/> message types related to transactional.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveTransactionalSupport(StockSharp.Messages.MessageAdapter)">
            <summary>
            Remove from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/> message types related to transactional.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="P:StockSharp.Messages.Extensions.MarketDataMessageTypes">
            <summary>
            Market-data message types.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddMarketDataSupport(StockSharp.Messages.MessageAdapter)">
            <summary>
            Fill the <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/> message types related to market-data.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveMarketDataSupport(StockSharp.Messages.MessageAdapter)">
            <summary>
            Remove from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/> message types related to market-data.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes,System.Nullable{System.Boolean})">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <param name="isMarketData"><paramref name="type"/> is market-data type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypeInfo)">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.PossibleSupportedMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="info">Extended info for <see cref="T:StockSharp.Messages.MessageTypes"/>.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Remove the message type from <see cref="P:StockSharp.Messages.IMessageAdapter.PossibleSupportedMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMessageSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Determines whether the specified message type is contained in <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <returns><see langword="true"/> if the specified message type is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedMarketDataType(StockSharp.Messages.MessageAdapter,StockSharp.Messages.DataType)">
            <summary>
            Add market data type into <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMarketDataTypes"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="dataType">Data type info.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedMarketDataType(StockSharp.Messages.MessageAdapter,StockSharp.Messages.DataType)">
            <summary>
            Remove market data type from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMarketDataTypes"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Market data type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedResultMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedResultMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedResultMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Remove the message type from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedResultMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsResultMessageSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Determines whether the specified message type is contained in <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedResultMessages"/>..
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <returns><see langword="true"/> if the specified message type is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedOutMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedOutMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedOutMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Remove the message type from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedOutMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOutMessageSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Determines whether the specified message type is contained in <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedOutMessages"/>..
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <returns><see langword="true"/> if the specified message type is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCandle(StockSharp.Messages.MessageTypes)">
            <summary>
            Determine the <paramref name="type"/> is candle data type.
            </summary>
            <param name="type">Message type.</param>
            <returns><see langword="true" />, if data type is candle, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMessageType(System.Type)">
            <summary>
            Convert <see cref="T:System.Type"/> to <see cref="T:StockSharp.Messages.MessageTypes"/> value.
            </summary>
            <param name="type"><see cref="T:System.Type"/> value.</param>
            <returns><see cref="T:StockSharp.Messages.MessageTypes"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMessageType(StockSharp.Messages.MessageTypes)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MessageTypes"/> to <see cref="T:System.Type"/> value.
            </summary>
            <param name="type"><see cref="T:StockSharp.Messages.MessageTypes"/> value.</param>
            <returns><see cref="T:System.Type"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToCandleMessageType(StockSharp.Messages.MessageTypes)">
            <summary>
            To convert the type of message <see cref="T:StockSharp.Messages.MessageTypes"/> into type of candles <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="type">Message type.</param>
            <returns>Candles type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataTypeArg(System.Type,System.String)">
            <summary>
            To convert string representation of the candle argument into typified.
            </summary>
            <param name="messageType">The type of candle message.</param>
            <param name="str">The string representation of the argument.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.DataTypeArgToString(StockSharp.Messages.DataType)">
            <summary>
            Convert candle parameter into folder name replacing the reserved symbols.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.DataTypeArgToString(System.Type,System.Object)">
            <summary>
            Convert candle parameter into folder name replacing the reserved symbols.
            </summary>
            <param name="messageType">The type of candle message.</param>
            <param name="arg">Candle arg.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FileNameToDataType(System.String)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.DataType"/> to file name.
            </summary>
            <param name="fileName">File name.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.DataTypeToFileName(StockSharp.Messages.DataType)">
            <summary>
            Convert file name to <see cref="T:StockSharp.Messages.DataType"/>.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>File name.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.AllCandleTypes">
            <summary>
            All registered candle types.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RegisterCandleType``1(System.Type,StockSharp.Messages.MessageTypes,StockSharp.Messages.MarketDataTypes,System.String,System.Func{System.String,``0},System.Func{``0,System.String})">
            <summary>
            Register new candle type.
            </summary>
            <param name="messageType">The type of candle message.</param>
            <param name="type">Message type.</param>
            <param name="dataType">Candles type.</param>
            <param name="fileName">File name.</param>
            <param name="argParserTo"><see cref="T:System.String"/> to <typeparamref name="TArg"/> converter.</param>
            <param name="argParserFrom"><typeparamref name="TArg"/> to <see cref="T:System.String"/> converter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToCandleMessage(StockSharp.Messages.MessageTypes)">
            <summary>
            Cast candle type <see cref="T:StockSharp.Messages.MessageTypes"/> to the message <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="type">Candle type.</param>
            <returns>Message type <see cref="T:StockSharp.Messages.CandleMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCandlesSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MarketDataMessage)">
            <summary>
            Determines whether the specified subscription request is supported by the adapter.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="subscription">Subscription.</param>
            <returns><see langword="true"/> if the specified subscription request is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetTimeFrames(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get possible time-frames for the specified instrument.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="securityId">Security ID.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <returns>Possible time-frames.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetCandleArgs``1(StockSharp.Messages.IMessageAdapter,System.Type,StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get possible args for the specified candle type and instrument.
            </summary>
            <typeparam name="TArg">Type of <see cref="P:StockSharp.Messages.CandleMessage.Arg"/>.</typeparam>
            <param name="adapter">Adapter.</param>
            <param name="candleType">The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</param>
            <param name="securityId">Security ID.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <returns>Possible args.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataType(System.String,System.String)">
            <summary>
            Convert <see cref="T:System.String"/> to <see cref="T:StockSharp.Messages.DataType"/> value.
            </summary>
            <param name="type">type.</param>
            <param name="arg">Arg.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FormatToString(StockSharp.Messages.DataType)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.DataType"/> to <see cref="T:System.String"/> value.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns><see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataType(StockSharp.Messages.ExecutionTypes)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.ExecutionTypes"/> to <see cref="T:StockSharp.Messages.DataType"/> value.
            </summary>
            <param name="type">Data type, information about which is contained in the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMarketDataTypeSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.DataType)">
            <summary>
            Determines whether the specified market-data type is supported by the adapter.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <returns><see langword="true"/> if the specified message type is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedAllMarketDataTypes(StockSharp.Messages.MessageAdapter)">
            <summary>
            Remove all market data types from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMarketDataTypes"/>.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCandleMessage(System.Type)">
            <summary>
            Determines whether the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="messageType">The message type.</param>
            <returns><see langword="true"/> if the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HasOrderInfo(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Determines whether the specified message contains order information.
            </summary>
            <param name="message">The message.</param>
            <returns><see langword="true"/> if the specified message contains order information, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HasTradeInfo(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Determines whether the specified message contains trade information.
            </summary>
            <param name="message">The message.</param>
            <returns><see langword="true"/> if the specified message contains trade information, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToErrorMessage(System.String)">
            <summary>
            Convert error text message to <see cref="T:StockSharp.Messages.ErrorMessage"/> instance.
            </summary>
            <param name="description">Error text message.</param>
            <returns><see cref="T:StockSharp.Messages.ErrorMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToErrorMessage(System.Exception,System.Int64)">
            <summary>
            Convert error info into <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
            <param name="error">Error info.</param>
            <param name="originalTransactionId">ID of the original message <see cref="P:StockSharp.Messages.ITransactionIdMessage.TransactionId"/> for which this message is a response.</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsObsolete(StockSharp.Messages.PositionChangeTypes)">
            <summary>
            Is the specified <see cref="T:StockSharp.Messages.PositionChangeTypes"/> was marked by <see cref="T:System.ObsoleteAttribute"/>.
            </summary>
            <param name="type"><see cref="T:StockSharp.Messages.PositionChangeTypes"/> value.</param>
            <returns><see langword="true" />, if obsolete, otherwise, not obsolete.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsObsolete(StockSharp.Messages.Level1Fields)">
            <summary>
            Is the specified <see cref="T:StockSharp.Messages.Level1Fields"/> was obsolete.
            </summary>
            <param name="field"><see cref="T:StockSharp.Messages.Level1Fields"/> value.</param>
            <returns><see langword="true" />, if obsolete, otherwise, not obsolete.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryInitLocalTime(StockSharp.Messages.Message,StockSharp.Logging.ILogSource)">
            <summary>
            Try to initialize <see cref="P:StockSharp.Messages.Message.LocalTime"/> by <see cref="P:StockSharp.Logging.ILogSource.CurrentTime"/>.
            </summary>
            <param name="message">Message.</param>
            <param name="source">Source.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ValidateBounds(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Validate <see cref="P:StockSharp.Messages.MarketDataMessage.From"/> and <see cref="P:StockSharp.Messages.MarketDataMessage.To"/> values.
            </summary>
            <param name="message">Message.</param>
            <returns>Message.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.LastTradeFields">
            <summary>
            Fields related to last trade.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsLastTradeField(StockSharp.Messages.Level1Fields)">
            <summary>
            Is the specified <see cref="T:StockSharp.Messages.Level1Fields"/> is related to last trade.
            </summary>
            <param name="field">Field.</param>
            <returns>Check result.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.BestBidFields">
            <summary>
            Fields related to best bid.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsBestBidField(StockSharp.Messages.Level1Fields)">
            <summary>
            Is the specified <see cref="T:StockSharp.Messages.Level1Fields"/> is related to best bid.
            </summary>
            <param name="field">Field.</param>
            <returns>Check result.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.BestAskFields">
            <summary>
            Fields related to best ask.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsBestAskField(StockSharp.Messages.Level1Fields)">
            <summary>
            Is the specified <see cref="T:StockSharp.Messages.Level1Fields"/> is related to best ask.
            </summary>
            <param name="field">Field.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FillDefaultCryptoFields(StockSharp.Messages.SecurityId)">
            <summary>
            Fill default <see cref="F:StockSharp.Messages.SecurityTypes.CryptoCurrency"/> price and volume step by 0.00000001 value.
            </summary>
            <param name="secId">Security ID.</param>
            <returns>A message containing info about the security.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FillDefaultCryptoFields(StockSharp.Messages.SecurityMessage)">
            <summary>
            Fill default <see cref="F:StockSharp.Messages.SecurityTypes.CryptoCurrency"/> price and volume step by 0.00000001 value.
            </summary>
            <param name="message">A message containing info about the security.</param>
            <returns>A message containing info about the security.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetPreferredLanguage(System.Nullable{StockSharp.Messages.MessageAdapterCategories})">
            <summary>
            Get preferred language.
            </summary>
            <param name="categories">Message adapter categories.</param>
            <returns>Language</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOrderLogRegistered(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, does the string contain the order registration.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contains the order registration, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOrderLogCanceled(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, does the string contain the cancelled order.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contain the cancelled order, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOrderLogMatched(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, does the string contain the order matching.
            </summary>
            <param name="item">Order log item.</param>
            <returns><see langword="true" />, if the string contains order matching, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetPeriod(StockSharp.Messages.WorkingTime,System.DateTime)">
            <summary>
            Get period for schedule.
            </summary>
            <param name="time">Trading schedule.</param>
            <param name="date">The date in time for search of appropriate period.</param>
            <returns>The schedule period. If no period is appropriate, <see langword="null" /> is returned.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.EncodeToString(System.Collections.Generic.IEnumerable{StockSharp.Messages.WorkingTimePeriod})">
            <summary>
            Encode <see cref="P:StockSharp.Messages.WorkingTime.Periods"/> to string.
            </summary>
            <param name="periods">Schedule validity periods.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.DecodeToPeriods(System.String)">
            <summary>
            Decode from string to <see cref="P:StockSharp.Messages.WorkingTime.Periods"/>.
            </summary>
            <param name="input">Encoded string.</param>
            <returns>Schedule validity periods.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.EncodeToString(System.Collections.Generic.IDictionary{System.DateTime,Ecng.ComponentModel.Range{System.TimeSpan}[]})">
            <summary>
            Encode <see cref="P:StockSharp.Messages.WorkingTime.SpecialDays"/> to string.
            </summary>
            <param name="specialDays">Special working days and holidays.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.DecodeToSpecialDays(System.String)">
            <summary>
            Decode from string to <see cref="P:StockSharp.Messages.WorkingTime.SpecialDays"/>.
            </summary>
            <param name="input">Encoded string.</param>
            <returns>Special working days and holidays.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMarketData(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Is the specified adapter support market-data.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsTransactional(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Is the specified adapter support transactions.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsSupportStopLoss(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Determines whether the adapter support stop-loss orders.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsSupportTakeProfit(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Determines whether the adapter support take-profit orders.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsSupportWithdraw(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Determines whether the adapter support withdraw orders.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetSecurityCode(StockSharp.Messages.SecurityMessage,System.String)">
            <summary>
            Initialize <see cref="P:StockSharp.Messages.SecurityId.SecurityCode"/>.
            </summary>
            <param name="message">A message containing info about the security.</param>
            <param name="secCode">Security code.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetNativeId(StockSharp.Messages.SecurityId,System.Object)">
            <summary>
            Initialize <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
            <param name="secId">Security ID.</param>
            <param name="nativeId">Native (internal) trading system security id.</param>
            <returns>Security ID.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetNativeId(StockSharp.Messages.SecurityMessage,System.Object)">
            <summary>
            Initialize <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
            <param name="message">A message containing info about the security.</param>
            <param name="nativeId">Native (internal) trading system security id.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetSecurityTypes(StockSharp.Messages.SecurityLookupMessage,System.Nullable{StockSharp.Messages.SecurityTypes},System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityTypes})">
            <summary>
            Initialize <see cref="P:StockSharp.Messages.SecurityLookupMessage.SecurityTypes"/>.
            </summary>
            <param name="message">Message security lookup for specified criteria.</param>
            <param name="type">Security type.</param>
            <param name="types">Securities types.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSecurityTypes(StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            Get <see cref="P:StockSharp.Messages.SecurityLookupMessage.SecurityTypes"/>.
            </summary>
            <param name="message">Message security lookup for specified criteria.</param>
            <returns>Securities types.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FindById(System.Collections.Generic.IEnumerable{StockSharp.Messages.IMessageAdapter},System.Guid)">
            <summary>
            Get adapter by the specified key.
            </summary>
            <param name="adapters">All available adapters.</param>
            <param name="id">Adapter identifier.</param>
            <returns>Found adapter or <see langword="null"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateAdapter(System.Type)">
            <summary>
            Create <see cref="T:StockSharp.Messages.IMessageAdapter"/> instance.
            </summary>
            <param name="adapterType">Adapter type.</param>
            <returns><see cref="T:StockSharp.Messages.IMessageAdapter"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateAdapter(System.Type,Ecng.Common.IdGenerator)">
            <summary>
            Create <see cref="T:StockSharp.Messages.IMessageAdapter"/>.
            </summary>
            <param name="adapterType">Adapter type.</param>
            <param name="idGenerator">Transaction id generator.</param>
            <returns><see cref="T:StockSharp.Messages.IMessageAdapter"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryRemoveWrapper``1(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Remove adapter by the specified type.
            </summary>
            <typeparam name="TAdapter">The adapter type.</typeparam>
            <param name="adapter">Adapter.</param>
            <returns>Removed adapter or <see langword="null"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FindAdapter``1(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Find adapter by the specified type.
            </summary>
            <typeparam name="TAdapter">The adapter type.</typeparam>
            <param name="adapter">Adapter.</param>
            <returns>Found adapter or <see langword="null"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FindAdapter``1(StockSharp.Messages.IMessageAdapterWrapper)">
            <summary>
            Find adapter by the specified type.
            </summary>
            <typeparam name="TAdapter">The adapter type.</typeparam>
            <param name="wrapper">Wrapping based adapter.</param>
            <returns>Found adapter or <see langword="null"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOk(StockSharp.Messages.SubscriptionResponseMessage)">
            <summary>
            Determines whether the reply contains an error <see cref="P:StockSharp.Messages.SubscriptionResponseMessage.Error"/>.
            </summary>
            <param name="message">Reply.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsNotSupported(StockSharp.Messages.SubscriptionResponseMessage)">
            <summary>
            Determines whether the reply contains the error <see cref="F:StockSharp.Messages.SubscriptionResponseMessage.NotSupported"/>.
            </summary>
            <param name="message">Reply.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateNotSupported(System.Int64)">
            <summary>
            Create non supported subscription response.
            </summary>
            <param name="id">ID of the original message for which this message is a response.</param>
            <returns>Subscription response message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateSubscriptionResponse(System.Int64,System.Exception)">
            <summary>
            Create subscription response.
            </summary>
            <param name="id">ID of the original message for which this message is a response.</param>
            <param name="error">Error info.</param>
            <returns>Subscription response message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateResponse(StockSharp.Messages.ISubscriptionMessage,System.Exception)">
            <summary>
            Create subscription response.
            </summary>
            <param name="message">Subscription.</param>
            <param name="error">Error info.</param>
            <returns>Subscription response message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateResult(StockSharp.Messages.ISubscriptionMessage)">
            <summary>
            Create <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/> or <see cref="T:StockSharp.Messages.SubscriptionFinishedMessage"/> depends of <see cref="P:StockSharp.Messages.ISubscriptionMessage.To"/>.
            </summary>
            <param name="message">Subscription.</param>
            <returns>Message.</returns>
        </member>
        <member name="F:StockSharp.Messages.Extensions.AnyDepths">
            <summary>
            Special set mean any depth for <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedOrderBookDepths"/> option.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.NearestSupportedDepth(StockSharp.Messages.IMessageAdapter,System.Int32)">
            <summary>
            Get the nearest supported depth for the specified.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="depth">Depth.</param>
            <returns>Supported depth.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateOrderLogMarketDepthBuilder(System.Type,StockSharp.Messages.SecurityId)">
            <summary>
            Create <see cref="T:StockSharp.Messages.IOrderLogMarketDepthBuilder"/> instance.
            </summary>
            <param name="builderType">Builder type.</param>
            <param name="securityId">Security ID.</param>
            <returns><see cref="T:StockSharp.Messages.IOrderLogMarketDepthBuilder"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetArg(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Get typed argument.
            </summary>
            <param name="mdMsg">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <returns>The additional argument, associated with data. For example, candle argument.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetArg``1(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Get typed argument.
            </summary>
            <typeparam name="TArg">Arg type.</typeparam>
            <param name="mdMsg">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <returns>The additional argument, associated with data. For example, candle argument.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetArg``1(StockSharp.Messages.MarketDataMessage,``0)">
            <summary>
            Set typed argument.
            </summary>
            <typeparam name="TArg">Arg type.</typeparam>
            <param name="mdMsg">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetTimeFrame(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Get time-frame from the specified market-data message.
            </summary>
            <param name="mdMsg">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <returns>Time-frame.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HandleErrorResponse(StockSharp.Messages.Message,System.Exception,StockSharp.Logging.ILogReceiver,System.Action{StockSharp.Messages.Message},System.Func{StockSharp.Messages.DataType,System.Int64[]})">
             <summary>
            
             </summary>
             <param name="message"></param>
             <param name="ex"></param>
             <param name="logs"></param>
             <param name="sendOut"></param>
             <param name="getSubscribers"></param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.SetSubscriptionIds``1(``0,System.Int64[],System.Int64)">
            <summary>
            Set subscription identifiers into the specified message.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <param name="message">Message.</param>
            <param name="subscriptionIds">Identifiers.</param>
            <param name="subscriptionId">Identifier.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSubscriptionIds(StockSharp.Messages.ISubscriptionIdMessage)">
            <summary>
            Get subscription identifiers from the specified message.
            </summary>
            <param name="message">Message.</param>
            <returns>Identifiers.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMarketData(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Determines whether the <paramref name="execMsg"/> contains market-data info.
            </summary>
            <param name="execMsg">The message contains information about the execution.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetTradePrice(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Get <see cref="P:StockSharp.Messages.ExecutionMessage.TradePrice"/>.
            </summary>
            <param name="message">The message contains information about the execution.</param>
            <returns>Trade price.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBalance(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Get <see cref="P:StockSharp.Messages.ExecutionMessage.Balance"/>.
            </summary>
            <param name="message">The message contains information about the execution.</param>
            <returns>Order contracts balance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGetSecurityId(StockSharp.Messages.Message)">
            <summary>
            Try get security ID from the specified message.
            </summary>
            <param name="message">Message.</param>
            <returns>Security ID or <see langword="null"/> if message do not provide it.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ReplaceSecurityId(StockSharp.Messages.Message,StockSharp.Messages.SecurityId)">
            <summary>
            Replace security id by the specified.
            </summary>
            <param name="message">Message.</param>
            <param name="securityId">Security ID.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsSupportSubscriptionByPortfolio(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Support portfolio subscriptions.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMoney(StockSharp.Messages.SecurityId)">
            <summary>
            Check if the specified id is money id.
            </summary>
            <param name="secId">The message contains information about the position changes.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMoney(StockSharp.Messages.PositionChangeMessage)">
            <summary>
            Determines the specified message contains <see cref="F:StockSharp.Messages.SecurityId.Money"/> position.
            </summary>
            <param name="posMsg">The message contains information about the position changes.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateOrderCondition(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Create condition for order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, that supports the adapter.
            </summary>
            <remarks>
            If the connection does not support the order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, it will be returned <see langword="null" />.
            </remarks>
            <param name="adapter">Adapter.</param>
            <returns>Order condition.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateOrderCondition(System.Type)">
            <summary>
            Create condition for order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, that supports the adapter.
            </summary>
            <param name="orderConditionType">Type of <see cref="T:StockSharp.Messages.OrderCondition"/>.</param>
            <returns>Order condition.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsSupportSecuritiesLookupAll(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Support lookup all securities.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HasOrderId(StockSharp.Messages.OrderStatusMessage)">
            <summary>
            Determines the specified message contains single order request.
            </summary>
            <param name="message">Message.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.LoopBack``1(``0,StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageBackModes)">
            <summary>
            Made the specified message as <see cref="P:StockSharp.Messages.Message.BackMode"/>.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <param name="message">Message.</param>
            <param name="adapter">Adapter.</param>
            <param name="mode">Back mode.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.UndoBack``1(``0)">
            <summary>
            Undo operation made via <see cref="M:StockSharp.Messages.Extensions.LoopBack``1(``0,StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageBackModes)"/>.
            </summary>
            <typeparam name="TMessage">Message type.</typeparam>
            <param name="message">Message.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsBack(StockSharp.Messages.IMessage)">
            <summary>
            Determines the specified message is loopback.
            </summary>
            <param name="message">Message.</param>
            <returns>Is loopback message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetHistoryStepSize(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.DataType,System.TimeSpan@)">
            <summary>
            Get maximum size step allowed for historical download.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="dataType">Data type info.</param>
            <param name="iterationInterval">Interval between iterations.</param>
            <returns>Step.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetDefaultMaxCount(StockSharp.Messages.DataType)">
            <summary>
            Get maximum possible items count per single subscription request.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Max items count.</returns>
        </member>
        <member name="F:StockSharp.Messages.Extensions.NewsStockSharpSource">
            <summary>
            StockSharp news source.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Extensions.SimulatorPortfolioName">
            <summary>
            Simulator.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Extensions.AnonymousPortfolioName">
            <summary>
            Anonymous account.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToTicks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To convert level1 data into tick data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Tick data.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsContainsTick(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To check, are there tick data in the level1 data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>The test result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToTick(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To convert level1 data into tick data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Tick data.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsContainsCandle(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To check, are there <see cref="P:StockSharp.Messages.DataType.CandleTimeFrame"/> in the level1 data.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>The test result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToOrderBooks(System.Collections.Generic.IEnumerable{StockSharp.Messages.Level1ChangeMessage})">
            <summary>
            To convert level1 data into order books.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Market depths.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsContainsQuotes(StockSharp.Messages.Level1ChangeMessage)">
            <summary>
            To check, are there quotes in the level1.
            </summary>
            <param name="level1">Level1 data.</param>
            <returns>Quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetPriceStep(System.Int32)">
            <summary>
            To get the price increment on the basis of accuracy.
            </summary>
            <param name="decimals">Decimals.</param>
            <returns>Price step.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsAllSecurity(StockSharp.Messages.SecurityId)">
            <summary>
            Check if the specified identifier is <see cref="M:StockSharp.Messages.Extensions.IsAllSecurity(StockSharp.Messages.SecurityId)"/>.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns><see langword="true"/>, if the specified identifier is <see cref="M:StockSharp.Messages.Extensions.IsAllSecurity(StockSharp.Messages.SecurityId)"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMicexCurrencyName(Ecng.Common.CurrencyTypes)">
            <summary>
            To convert the currency type into the name in the MICEX format.
            </summary>
            <param name="type">Currency type.</param>
            <returns>The currency name in the MICEX format.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FromMicexCurrencyName(System.String,System.Action{System.Exception})">
            <summary>
            To convert the currency name in the MICEX format into <see cref="T:Ecng.Common.CurrencyTypes"/>.
            </summary>
            <param name="name">The currency name in the MICEX format.</param>
            <param name="errorHandler">Error handler.</param>
            <returns>Currency type. If the value is empty, <see langword="null" /> will be returned.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSecurityClassInfo(System.Collections.Generic.IDictionary{System.String,Ecng.Common.RefPair{StockSharp.Messages.SecurityTypes,System.String}},System.String)">
            <summary>
            To get the instrument description by the class.
            </summary>
            <param name="securityClassInfo">Description of the class of securities, depending on which will be marked in the <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType"/> and <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.</param>
            <param name="secClass">Security class.</param>
            <returns>The instrument description. If the class is not found, then empty value is returned as instrument type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBoardCode(StockSharp.Messages.IMessageAdapter,System.String)">
            <summary>
            To get the board code for the instrument class.
            </summary>
            <param name="adapter">Adapter to the trading system.</param>
            <param name="secClass">Security class.</param>
            <returns>Board code.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToType(StockSharp.Messages.Level1Fields)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.Level1Fields"/> to <see cref="T:System.Type"/> value.
            </summary>
            <param name="field"><see cref="T:StockSharp.Messages.Level1Fields"/> value.</param>
            <returns><see cref="T:System.Type"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToType(StockSharp.Messages.PositionChangeTypes)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.PositionChangeTypes"/> to <see cref="T:System.Type"/> value.
            </summary>
            <param name="type"><see cref="T:StockSharp.Messages.PositionChangeTypes"/> value.</param>
            <returns><see cref="T:System.Type"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToLevel1(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.QuoteChangeMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.QuoteChangeMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToLevel1(StockSharp.Messages.CandleMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.CandleMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.CandleMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToLevel1(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.ExecutionMessage"/> to <see cref="T:StockSharp.Messages.Level1ChangeMessage"/> value.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.ExecutionMessage"/> instance.</param>
            <returns><see cref="T:StockSharp.Messages.Level1ChangeMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToLevel1(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChangeMessage})">
            <summary>
            To build level1 from the order books.
            </summary>
            <param name="quotes">Order books.</param>
            <returns>Level1.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.FilterTimeFrames(System.Collections.Generic.IEnumerable{StockSharp.Messages.DataType})">
            <summary>
            Extract time frames from the specified data types set.
            </summary>
            <param name="dataTypes">Data types.</param>
            <returns>Possible time-frames.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Verify(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To determine whether the order book is in the right state.
            </summary>
            <param name="book">Order book.</param>
            <returns><see langword="true" />, if the order book contains correct data, otherwise <see langword="false" />.</returns>
            <remarks>
            It is used in cases when the trading system by mistake sends the wrong quotes.
            </remarks>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.ISubscriptionIdMessage,StockSharp.Messages.ISubscriptionMessage)">
            <summary>
            Determines the specified message is matched lookup criteria.
            </summary>
            <param name="message">Message.</param>
            <param name="criteria">The message which fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.BoardMessage,StockSharp.Messages.BoardLookupMessage)">
            <summary>
            Determines the specified message is matched lookup criteria.
            </summary>
            <param name="board">Board.</param>
            <param name="criteria">The message which fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.PortfolioMessage,StockSharp.Messages.PortfolioLookupMessage,System.Boolean)">
            <summary>
            Determines the specified message is matched lookup criteria.
            </summary>
            <param name="portfolio">Portfolio.</param>
            <param name="criteria">The message which fields will be used as a filter.</param>
            <param name="compareName">Fully compare <see cref="P:StockSharp.Messages.PortfolioMessage.PortfolioName"/>.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.PositionChangeMessage,StockSharp.Messages.PortfolioLookupMessage,System.Boolean)">
            <summary>
            Determines the specified message is matched lookup criteria.
            </summary>
            <param name="position">Position.</param>
            <param name="criteria">The message which fields will be used as a filter.</param>
            <param name="compareName">Fully compare <see cref="P:StockSharp.Messages.PositionChangeMessage.PortfolioName"/>.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.ExecutionMessage,StockSharp.Messages.OrderStatusMessage)">
            <summary>
            Determines the specified message is matched lookup criteria.
            </summary>
            <param name="transaction">Transaction.</param>
            <param name="criteria">The message which fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.ExecutionMessage,StockSharp.Messages.OrderStatusMessage,System.Collections.Generic.ISet{StockSharp.Messages.OrderStates})">
            <summary>
            Determines the specified transaction is matched lookup criteria.
            </summary>
            <param name="transaction">Transaction.</param>
            <param name="criteria">The order which fields will be used as a filter.</param>
            <param name="states">Filter order by the specified states.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.SecurityMessage,StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            Determines the specified security is matched lookup criteria.
            </summary>
            <param name="security">Security.</param>
            <param name="criteria">Message security lookup for specified criteria.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatch(StockSharp.Messages.SecurityMessage,StockSharp.Messages.SecurityLookupMessage,System.Collections.Generic.HashSet{StockSharp.Messages.SecurityTypes})">
            <summary>
            Determines the specified security is matched lookup criteria.
            </summary>
            <param name="security">Security.</param>
            <param name="criteria">Message security lookup for specified criteria.</param>
            <param name="secTypes">Securities types.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Filter(System.Collections.Generic.IEnumerable{StockSharp.Messages.SecurityMessage},StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            To filter instruments by the given criteria.
            </summary>
            <param name="securities">Securities.</param>
            <param name="criteria">Message security lookup for specified criteria.</param>
            <returns>Instruments filtered.</returns>
        </member>
        <member name="P:StockSharp.Messages.Extensions.AllSecurity">
            <summary>
            "All securities" instance.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Extensions.LookupAllCriteriaMessage">
            <summary>
            Lookup all securities predefined criteria.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsLookupAll(StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            Determine the <paramref name="criteria"/> contains lookup all filter.
            </summary>
            <param name="criteria">The instrument whose fields will be used as a filter.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ChangeSupported(StockSharp.Messages.IMessageAdapter,System.Boolean,System.Boolean)">
            <summary>
            Change <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="add">Command.</param>
            <param name="isMarketData">Message types.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMessageType2(StockSharp.Messages.DataType)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.DataType"/> to <see cref="T:StockSharp.Messages.MessageTypes"/> value.
            </summary>
            <param name="type"><see cref="T:StockSharp.Messages.DataType"/> value.</param>
            <returns>Message type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsOpened(StockSharp.Messages.IMessageChannel)">
            <summary>
            Is channel opened.
            </summary>
            <param name="channel">Message channel.</param>
            <returns>Check result.</returns>
        </member>
        <member name="F:StockSharp.Messages.Extensions.Today">
            <summary>
            Constant value for <see cref="P:StockSharp.Messages.OrderRegisterMessage.TillDate"/> means Today(=Session).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsToday(System.Nullable{System.DateTimeOffset})">
            <summary>
            To check the specified date is today.
            </summary>
            <param name="date">The specified date.</param>
            <returns><see langword="true"/> if the specified date is today, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsToday(System.DateTimeOffset)">
            <summary>
            To check the specified date is today.
            </summary>
            <param name="date">The specified date.</param>
            <returns><see langword="true"/> if the specified date is today, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.EnsureToday(System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines the specified date equals is <see cref="F:StockSharp.Messages.Extensions.Today"/> and returns <see cref="P:System.DateTime.Today"/>.
            </summary>
            <param name="date">The specified date.</param>
            <returns>Result value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.EnsureToday(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines the specified date equals is <see cref="F:StockSharp.Messages.Extensions.Today"/> and returns <paramref name="todayValue"/>.
            </summary>
            <param name="date">The specified date.</param>
            <param name="todayValue">Today value.</param>
            <returns>Result value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetSupportedDataTypes(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Get supported y adapter data types.
            </summary>
            <param name="adapter">Adapter.</param>
            <returns>Supported by adapter data types.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChangeMessage,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            To create from regular order book a sparse one.
            </summary>
            <remarks>
            In sparsed book shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="depth">The regular order book.</param>
            <param name="priceRange">Minimum price step.</param>
            <param name="priceStep">Security price step.</param>
            <returns>The sparse order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.Unit,System.Nullable{System.Decimal})">
            <summary>
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChange,StockSharp.Messages.QuoteChange,StockSharp.Messages.Unit,System.Nullable{System.Decimal})">
            <summary>
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChange,StockSharp.Messages.QuoteChange,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            To create form pair of quotes a sparse collection of quotes, which will be included into the range between the pair.
            </summary>
            <remarks>
            In sparsed collection shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="bid">Bid.</param>
            <param name="ask">Ask.</param>
            <param name="priceRange">Minimum price step.</param>
            <param name="priceStep">Security price step.</param>
            <returns>The sparse collection of quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChange[],StockSharp.Messages.Sides,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            To create the sparse collection of quotes from regular quotes.
            </summary>
            <remarks>
            In sparsed collection shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="quotes">Regular quotes. The collection shall contain quotes of the same direction (only bids or only offers).</param>
            <param name="side">Side.</param>
            <param name="priceRange">Minimum price step.</param>
            <param name="priceStep">Security price step.</param>
            <returns>The sparse collection of quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Sparse(StockSharp.Messages.QuoteChange[],StockSharp.Messages.Sides,StockSharp.Messages.Unit,System.Nullable{System.Decimal})">
            <summary>
            To create the sparse collection of quotes from regular quotes.
            </summary>
            <remarks>
            In sparsed collection shown quotes with no active orders. The volume of these quotes is 0.
            </remarks>
            <param name="quotes">Regular quotes. The collection shall contain quotes of the same direction (only bids or only offers).</param>
            <param name="side">Side.</param>
            <param name="priceRange">Minimum price step.</param>
            <param name="priceStep">Security price step.</param>
            <returns>The sparse collection of quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Group(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.Unit)">
            <summary>
            To group the order book by the price range.
            </summary>
            <param name="depth">The order book to be grouped.</param>
            <param name="priceRange">The price range, for which grouping shall be performed.</param>
            <returns>The grouped order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Group(StockSharp.Messages.QuoteChangeMessage,System.Decimal)">
            <summary>
            To group the order book by the price range.
            </summary>
            <param name="depth">The order book to be grouped.</param>
            <param name="priceRange">The price range, for which grouping shall be performed.</param>
            <returns>The grouped order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.UnGroup(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To de-group the order book, grouped using the method <see cref="M:StockSharp.Messages.Extensions.Group(StockSharp.Messages.QuoteChangeMessage,System.Decimal)"/>.
            </summary>
            <param name="depth">The grouped order book.</param>
            <returns>The de-grouped order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Group(StockSharp.Messages.QuoteChange[],StockSharp.Messages.Sides,System.Decimal)">
            <summary>
            To group quotes by the price range.
            </summary>
            <param name="quotes">Quotes to be grouped.</param>
            <param name="side">Side.</param>
            <param name="priceRange">The price range, for which grouping shall be performed.</param>
            <returns>Grouped quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Group(StockSharp.Messages.QuoteChange[],StockSharp.Messages.Sides,StockSharp.Messages.Unit)">
            <summary>
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To calculate the change between order books.
            </summary>
            <param name="from">First order book.</param>
            <param name="to">Second order book.</param>
            <returns>The order book, storing only increments.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IComparer{System.Decimal})">
            <summary>
            To calculate the change between quotes.
            </summary>
            <param name="from">First quotes.</param>
            <param name="to">Second quotes.</param>
            <param name="comparer">The direction, showing the type of quotes.</param>
            <returns>Changes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddDelta(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To add change to the first order book.
            </summary>
            <param name="from">First order book.</param>
            <param name="delta">Change.</param>
            <returns>The changed order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddDelta(System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Collections.Generic.IEnumerable{StockSharp.Messages.QuoteChange},System.Boolean)">
            <summary>
            To add change to quote.
            </summary>
            <param name="fromQuotes">Quotes.</param>
            <param name="deltaQuotes">Changes.</param>
            <param name="isBids">The indication of quotes direction.</param>
            <returns>Changed quotes.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Join(StockSharp.Messages.QuoteChangeMessage,StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            To merge the initial order book and its sparse representation.
            </summary>
            <param name="original">The initial order book.</param>
            <param name="rare">The sparse order book.</param>
            <returns>The merged order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ShrinkPrice(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Int32},StockSharp.Messages.ShrinkRules)">
            <summary>
            To cut the price, to make it multiple of minimal step, also to limit number of signs after the comma.
            </summary>
            <param name="price">The price to be made multiple.</param>
            <param name="priceStep">Price step.</param>
            <param name="decimals">Number of digits in price after coma.</param>
            <param name="rule"></param>
            <returns>The multiple price.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TrySort(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Sort order book.
            </summary>
            <param name="quoteMsg">Order book.</param>
            <returns>Order book.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToReg(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.ExecutionMessage"/> to <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
            <param name="execMsg">The message contains information about the execution.</param>
            <returns>The message containing the information for the order registration.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToExec(StockSharp.Messages.OrderRegisterMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.OrderRegisterMessage"/> to <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
            <param name="regMsg">The message containing the information for the order registration.</param>
            <returns>The message contains information about the execution.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsHistoryOnly(StockSharp.Messages.ISubscriptionMessage)">
            <summary>
            Determines the specified message contains historical request only.
            </summary>
            <param name="message">Subscription.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Filter(System.Collections.Generic.IEnumerable{StockSharp.Messages.BoardMessage},StockSharp.Messages.BoardLookupMessage)">
            <summary>
            Filter boards by code criteria.
            </summary>
            <param name="boards">All boards.</param>
            <param name="criteria">Criteria.</param>
            <returns>Found boards.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGet(System.Collections.Generic.IDictionary{System.String,System.ValueTuple{System.String,System.String}},System.String,System.String)">
             <summary>
            
             </summary>
             <param name="parameters"></param>
             <param name="name"></param>
             <param name="defaultValue"></param>
             <returns></returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGet``1(System.Collections.Generic.IDictionary{System.String,System.ValueTuple{System.String,System.String}},System.String,``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="parameters"></param>
             <param name="name"></param>
             <param name="defaultValue"></param>
             <returns></returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Invert(StockSharp.Messages.Sides)">
            <summary>
            To change the direction to opposite.
            </summary>
            <param name="side">The initial direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCanceled(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, whether the order was cancelled.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is cancelled, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatched(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, is the order matched completely.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if the order is matched completely, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatchedPartially(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, is a part of volume is implemented in the order.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if part of volume is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMatchedEmpty(StockSharp.Messages.ExecutionMessage)">
            <summary>
            To check, if no contract in order is implemented.
            </summary>
            <param name="order">The order to be checked.</param>
            <returns><see langword="true" />, if no contract is implemented, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsBasket(StockSharp.Messages.SecurityMessage)">
            <summary>
            Is specified security is basket.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsIndex(StockSharp.Messages.SecurityMessage)">
            <summary>
            Is specified security is index.
            </summary>
            <param name="security">Security.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToReadableString(StockSharp.Messages.DataType)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.DataType"/> to readable string.
            </summary>
            <param name="dt"><see cref="T:StockSharp.Messages.DataType"/> instance.</param>
            <returns>Readable string.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Iso10962(StockSharp.Messages.SecurityMessage)">
            <summary>
            To get the type for the instrument in the ISO 10962 standard.
            </summary>
            <param name="security">Security.</param>
            <returns>Type in ISO 10962 standard.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Iso10962ToSecurityType(System.String)">
            <summary>
            To convert the type in the ISO 10962 standard into <see cref="T:StockSharp.Messages.SecurityTypes"/>.
            </summary>
            <param name="cfi">Type in ISO 10962 standard.</param>
            <returns>Security type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Iso10962ToOptionType(System.String)">
            <summary>
            To convert the type in the ISO 10962 standard into <see cref="T:StockSharp.Messages.OptionTypes"/>.
            </summary>
            <param name="cfi">Type in ISO 10962 standard.</param>
            <returns>Option type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.EnsureGetGenerator(StockSharp.Messages.SecurityIdGenerator)">
            <summary>
            Returns the specified generator or the default in case of <see langword="null"/>.
            </summary>
            <param name="generator"><see cref="T:StockSharp.Messages.SecurityIdGenerator"/></param>
            <returns><see cref="T:StockSharp.Messages.SecurityIdGenerator"/></returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToStringId(StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityIdGenerator,System.Boolean)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.SecurityId"/> to <see cref="T:StockSharp.Messages.SecurityId"/> value.
            </summary>
            <param name="securityId"><see cref="T:StockSharp.Messages.SecurityId"/> value.</param>
            <param name="generator">The instrument identifiers generator <see cref="T:StockSharp.Messages.SecurityId"/>. Can be <see langword="null"/>.</param>
            <param name="nullIfEmpty">Return <see langword="null"/> if <see cref="T:StockSharp.Messages.SecurityId"/> is empty.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityId"/> value.</returns>
        </member>
        <member name="F:StockSharp.Messages.Extensions.AllSecurityId">
            <summary>
            "All securities" id.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToSecurityId(System.String,StockSharp.Messages.SecurityIdGenerator)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.SecurityId"/> to <see cref="T:StockSharp.Messages.SecurityId"/> value.
            </summary>
            <param name="id"><see cref="T:StockSharp.Messages.SecurityId"/> value.</param>
            <param name="generator">The instrument identifiers generator <see cref="T:StockSharp.Messages.SecurityId"/>. Can be <see langword="null"/>.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityId"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataType(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MarketDataMessage"/> to <see cref="T:StockSharp.Messages.DataType"/> value.
            </summary>
            <param name="message">Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToCandleMarketDataType(System.Type)">
            <summary>
            Cast message type <see cref="T:StockSharp.Messages.CandleMessage"/> to the <see cref="T:StockSharp.Messages.MarketDataTypes"/>.
            </summary>
            <param name="messageType">The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</param>
            <returns><see cref="T:StockSharp.Messages.MarketDataTypes"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMarketDataType(StockSharp.Messages.MessageTypes,System.Object)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MarketDataTypes"/> to <see cref="T:StockSharp.Messages.MessageTypes"/> value.
            </summary>
            <param name="type">Message type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Market data type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMessageType(StockSharp.Messages.MarketDataTypes,System.Object@)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MarketDataTypes"/> to <see cref="T:StockSharp.Messages.MessageTypes"/> value.
            </summary>
            <param name="type">Market data type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Message type.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataType(StockSharp.Messages.MarketDataTypes,System.Object)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MarketDataTypes"/> to <see cref="T:StockSharp.Messages.DataType"/> value.
            </summary>
            <param name="type">Market data type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToMarketDataType(StockSharp.Messages.DataType)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.DataType"/> to <see cref="T:StockSharp.Messages.MarketDataTypes"/> value.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns><see cref="T:StockSharp.Messages.MarketDataTypes"/> value or <see langword="null"/> if cannot be converted.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCandleDataType(StockSharp.Messages.MarketDataTypes)">
            <summary>
            Determine the <paramref name="type"/> is candle data type.
            </summary>
            <param name="type">The data type.</param>
            <returns><see langword="true" />, if data type is candle, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToDataType(StockSharp.Messages.MessageTypes,System.Object)">
            <summary>
            Convert <see cref="T:StockSharp.Messages.MessageTypes"/> to <see cref="T:StockSharp.Messages.DataType"/> value.
            </summary>
            <param name="type">Message type.</param>
            <param name="arg">The additional argument, associated with data. For example, candle argument.</param>
            <returns>Data type info.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsLookup(StockSharp.Messages.DataType)">
            <summary>
            Determines the specified type is lookup.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGet``2(``0,``1)">
            <summary>
            Try get change from message.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <returns>Change value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryGetDecimal``2(``0,``1)">
            <summary>
            Try get change from message.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <returns>Change value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.Object)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.Decimal)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.Int32)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.Int64)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,StockSharp.Messages.SecurityStates)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.SecurityStates})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.String)">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,StockSharp.Messages.Sides)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.Sides})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,Ecng.Common.CurrencyTypes)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{Ecng.Common.CurrencyTypes})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,StockSharp.Messages.PortfolioStates)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{StockSharp.Messages.PortfolioStates})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.DateTimeOffset)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{System.DateTimeOffset})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Add``2(``0,``1,System.Boolean)">
            <summary>
            Add change into collection.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{System.Boolean})">
            <summary>
            To add a change to the collection, if value is other than <see langword="null"/>.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Decimal,System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Int32,System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Int64,System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.TryAdd``2(``0,``1,System.Nullable{System.Int64},System.Boolean)">
            <summary>
            To add a change to the collection, if value is other than 0 and <see langword="null" />.
            </summary>
            <typeparam name="TMessage">Change message type.</typeparam>
            <typeparam name="TChange">Change type.</typeparam>
            <param name="message">Change message.</param>
            <param name="type">Change type.</param>
            <param name="value">Change value.</param>
            <param name="isZeroAcceptable">Is zero value is acceptable values.</param>
            <returns>Change message.</returns>
        </member>
        <member name="T:StockSharp.Messages.IBasketSecurityProcessor">
            <summary>
            The interface of market data processor for basket securities.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IBasketSecurityProcessor.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IBasketSecurityProcessor.BasketExpression">
            <summary>
            Basket security expression.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IBasketSecurityProcessor.BasketLegs">
            <summary>
            Basket security legs.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IBasketSecurityProcessor.Process(StockSharp.Messages.Message)">
            <summary>
            Process message.
            </summary>
            <param name="message">Input message.</param>
            <returns>Output messages.</returns>
        </member>
        <member name="T:StockSharp.Messages.IBasketSecurityProcessorProvider">
            <summary>
            The interface for provider of <see cref="T:StockSharp.Messages.IBasketSecurityProcessor"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IBasketSecurityProcessorProvider.Register(System.String,System.Type,System.Type)">
            <summary>
            Register new security type.
            </summary>
            <param name="basketCode">Basket security type.</param>
            <param name="processorType">Processor type.</param>
            <param name="securityType">Security type.</param>
        </member>
        <member name="M:StockSharp.Messages.IBasketSecurityProcessorProvider.UnRegister(System.String)">
            <summary>
            Remove old security type.
            </summary>
            <param name="basketCode">Basket security type.</param>
        </member>
        <member name="M:StockSharp.Messages.IBasketSecurityProcessorProvider.GetProcessorType(System.String)">
            <summary>
            Get processor type.
            </summary>
            <param name="basketCode">Basket security type.</param>
            <returns>Processor type.</returns>
        </member>
        <member name="M:StockSharp.Messages.IBasketSecurityProcessorProvider.GetSecurityType(System.String)">
            <summary>
            Get security type.
            </summary>
            <param name="basketCode">Basket security type.</param>
            <returns>Security type.</returns>
        </member>
        <member name="T:StockSharp.Messages.IErrorMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IErrorMessage.Error"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IErrorMessage.Error">
            <summary>
            Error info.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IExtendableEntity">
            <summary>
            The interface for all trading types that have the property <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/> for keeping extended information.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
            <remarks>
            Required when extra information is stored in the program.
            </remarks>
        </member>
        <member name="T:StockSharp.Messages.ExtandableEntityHelper">
            <summary>
            Extension class for <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ExtandableEntityHelper.AddValue(StockSharp.Messages.IExtendableEntity,System.String,System.Object)">
            <summary>
            Add value into <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
            <param name="entity">Entity.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Messages.ExtandableEntityHelper.GetValue``1(StockSharp.Messages.IExtendableEntity,System.String)">
            <summary>
            Get value from <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="entity">Entity.</param>
            <param name="key">Key.</param>
            <returns>Value.</returns>
        </member>
        <member name="T:StockSharp.Messages.IGeneratedMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IGeneratedMessage.BuildFrom"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IGeneratedMessage.BuildFrom">
            <summary>
            Determines the message is generated from the specified <see cref="T:StockSharp.Messages.DataType"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IMessage.Type"/> method.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessage.Type">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessage.LocalTime">
            <summary>
            Local timestamp when a message was received/created.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessage.Adapter">
            <summary>
            Source adapter. Can be <see langword="null" />.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessage.BackMode">
            <summary>
            Back mode.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapter">
            <summary>
            Base message adapter interface which convert messages <see cref="T:StockSharp.Messages.Message"/> to native commands and back.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.TransactionIdGenerator">
            <summary>
            Transaction id generator.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.PossibleSupportedMessages">
            <summary>
            Possible supported by adapter message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedInMessages">
            <summary>
            Supported by adapter message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedOutMessages">
            <summary>
            Supported by adapter message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedResultMessages">
            <summary>
            Supported by adapter result message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedMarketDataTypes">
            <summary>
            Supported by adapter market data types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SecurityClassInfo">
            <summary>
            Description of the class of securities, depending on which will be marked in the <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType"/> and <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.CandlesBuildFrom">
            <summary>
            Possible options for candles building.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.CheckTimeFrameByRequest">
            <summary>
            Check possible time-frame by request.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.ReConnectionSettings">
            <summary>
            Connection tracking settings <see cref="T:StockSharp.Messages.IMessageAdapter"/> with a server.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.HeartbeatInterval">
            <summary>
             Server check interval for track the connection alive. The value is <see cref="F:System.TimeSpan.Zero"/> turned off tracking.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.StorageName">
            <summary>
            The storage name, associated with the adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsNativeIdentifiersPersistable">
            <summary>
            Native identifier can be stored.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsNativeIdentifiers">
            <summary>
            Identify security in messages by native identifier <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsFullCandlesOnly">
            <summary>
            Translates <see cref="T:StockSharp.Messages.CandleMessage"/> as only fully filled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportSubscriptions">
            <summary>
            Support any subscriptions (ticks, order books etc.).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportCandlesUpdates">
            <summary>
            Support candles subscription and live updates.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportCandlesPriceLevels">
            <summary>
            Support candles <see cref="P:StockSharp.Messages.CandleMessage.PriceLevels"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.Categories">
            <summary>
            Message adapter categories.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SecurityExtendedFields">
            <summary>
            Names of extended security fields in <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedOrderBookDepths">
            <summary>
            Available options for <see cref="P:StockSharp.Messages.MarketDataMessage.MaxDepth"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportOrderBookIncrements">
            <summary>
            Adapter translates incremental order books.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportExecutionsPnL">
            <summary>
            Adapter fills <see cref="P:StockSharp.Messages.ExecutionMessage.PnL"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSecurityNewsOnly">
            <summary>
            Adapter provides news related with specified security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.EnqueueSubscriptions">
            <summary>
            Enqueue subscriptions.
            </summary>
            <remarks>
            Do not send new request before received confirmation for previous.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.OrderConditionType">
            <summary>
            Type of <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
            <remarks>
            If the connection does not support the order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, it will be returned <see langword="null" />.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.HeartbeatBeforConnect">
            <summary>
            Start sending <see cref="T:StockSharp.Messages.TimeMessage"/> before connection established.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.Icon">
            <summary>
            Icon.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsAutoReplyOnTransactonalUnsubscription">
            <summary>
            Send auto response for <see cref="T:StockSharp.Messages.OrderStatusMessage"/> and <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/> unsubscribes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsSupportTransactionLog">
            <summary>
            Adapter translates orders changes on reply of <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsPositionsEmulationRequired">
            <summary>
            Adapter required emulation <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <remarks><see langword="null"/> means no emulatior, <see langword="true"/> by order balance, <see langword="false"/> by trades.</remarks>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsReplaceCommandEditCurrent">
            <summary>
            Is the <see cref="T:StockSharp.Messages.OrderReplaceMessage"/> command edit a current order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.GenerateOrderBookFromLevel1">
            <summary>
            Generate <see cref="T:StockSharp.Messages.QuoteChangeMessage"/> from <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
            <summary>
            Create market depth builder.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns>Order log to market depth builder.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.GetCandleArgs(System.Type,StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get possible args for the specified candle type and instrument.
            </summary>
            <param name="candleType">The type of the message <see cref="T:StockSharp.Messages.CandleMessage"/>.</param>
            <param name="securityId">Security ID.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <returns>Possible args.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.GetHistoryStepSize(StockSharp.Messages.DataType,System.TimeSpan@)">
            <summary>
            Get maximum size step allowed for historical download.
            </summary>
            <param name="dataType">Data type info.</param>
            <param name="iterationInterval">Interval between iterations.</param>
            <returns>Step.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.GetMaxCount(StockSharp.Messages.DataType)">
            <summary>
            Get maximum possible items count per single subscription request.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Max items count.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.IsAllDownloadingSupported(StockSharp.Messages.DataType)">
            <summary>
            Is for the specified <paramref name="dataType"/> all securities downloading enabled.
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.IsSecurityRequired(StockSharp.Messages.DataType)">
            <summary>
            Support filtering subscriptions (subscribe/unsubscribe for specified security).
            </summary>
            <param name="dataType">Data type info.</param>
            <returns>Check result.</returns>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.UseChannels">
            <summary>
            Use channels for in and out messages.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.FeatureName">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IterationInterval">
            <summary>
            Interval between iterations.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.LookupTimeout">
            <summary>
            Lookup timeout.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IKeySecretAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.IKeySecretAdapter.Key"/> and <see cref="P:StockSharp.Messages.IKeySecretAdapter.Secret"/> properties.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IKeySecretAdapter.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IKeySecretAdapter.Secret">
            <summary>
            Secret.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ILoginPasswordAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.ILoginPasswordAdapter.Login"/> and <see cref="P:StockSharp.Messages.ILoginPasswordAdapter.Password"/> properties.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ILoginPasswordAdapter.Login">
            <summary>
            Login.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ILoginPasswordAdapter.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ITokenAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.ITokenAdapter.Token"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ITokenAdapter.Token">
            <summary>
            Token.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IDemoAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.IDemoAdapter.IsDemo"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IDemoAdapter.IsDemo">
            <summary>
            Connect to demo trading instead of real trading server.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IAddressAdapter`1">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.IAddressAdapter`1.Address"/> property.
            </summary>
            <typeparam name="TAddress">Address type.</typeparam>
        </member>
        <member name="P:StockSharp.Messages.IAddressAdapter`1.Address">
            <summary>
            Server address.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ISenderTargetAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.ISenderTargetAdapter.SenderCompId"/> and <see cref="P:StockSharp.Messages.ISenderTargetAdapter.TargetCompId"/> properties.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISenderTargetAdapter.SenderCompId">
            <summary>
            Sender ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISenderTargetAdapter.TargetCompId">
            <summary>
            Target ID.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IClientVersionAdapter">
            <summary>
            Message adapter, provided <see cref="P:StockSharp.Messages.IClientVersionAdapter.ClientVersion"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IClientVersionAdapter.ClientVersion">
            <summary>
            Client app version.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapterProvider">
            <summary>
            The message adapter's provider interface.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapterProvider.CurrentAdapters">
            <summary>
            All currently available adapters.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapterProvider.PossibleAdapters">
            <summary>
            All possible adapters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapterProvider.CreateTransportAdapter(Ecng.Common.IdGenerator)">
            <summary>
            Create adapter for client-server communication.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
            <returns>Message adapter.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapterProvider.CreateStockSharpAdapters(Ecng.Common.IdGenerator,System.String,System.Security.SecureString)">
            <summary>
            Create adapters for StockSharp server connections.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
            <param name="login">Login.</param>
            <param name="password">Password.</param>
            <returns>Adapters for StockSharp server connections.</returns>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapterWrapper">
            <summary>
            Wrapping based adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapterWrapper.InnerAdapter">
            <summary>
            Underlying adapter.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapterWrapper">
            <summary>
            Base implementation of <see cref="T:StockSharp.Messages.IMessageAdapterWrapper"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MessageAdapterWrapper"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.OwnInnerAdapter">
            <summary>
            Control <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> lifetime.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.InnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.RaiseNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            To call the event <see cref="E:StockSharp.Messages.MessageAdapterWrapper.NewOutMessage"/>.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SendInBackFurther">
            <summary>
            Auto send <see cref="P:StockSharp.Messages.Message.BackMode"/> messages to <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.OnSendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
            <returns><see langword="true"/> if the specified message was processed successfully, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:StockSharp.Messages.MessageAdapterWrapper.NewOutMessage">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.Parent">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Messages.MessageAdapterWrapper.ParentRemoved">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.CurrentTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.CheckTimeFrameByRequest">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.ReConnectionSettings">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.TransactionIdGenerator">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.PossibleSupportedMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SupportedInMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SupportedOutMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SupportedResultMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SupportedMarketDataTypes">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.HeartbeatInterval">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.StorageName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsNativeIdentifiersPersistable">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsNativeIdentifiers">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsFullCandlesOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportSubscriptions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportCandlesUpdates">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportCandlesPriceLevels">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.Categories">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.SupportedOrderBookDepths">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportOrderBookIncrements">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportExecutionsPnL">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSecurityNewsOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.CandlesBuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsSupportTransactionLog">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.IsPositionsEmulationRequired">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.GetCandleArgs(System.Type,StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.GetHistoryStepSize(StockSharp.Messages.DataType,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.GetMaxCount(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.IsAllDownloadingSupported(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.IsSecurityRequired(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.ChannelStates">
            <summary>
            States <see cref="T:StockSharp.Messages.IMessageChannel"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Stopping">
            <summary>
            Stopping.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Starting">
            <summary>
            Starting.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Started">
            <summary>
            Working.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Suspending">
            <summary>
            In the process of suspension.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ChannelStates.Suspended">
            <summary>
            Suspended.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IMessageChannel">
            <summary>
            Message channel base interface.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageChannel.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="E:StockSharp.Messages.IMessageChannel.StateChanged">
            <summary>
            <see cref="P:StockSharp.Messages.IMessageChannel.State"/> change event.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Open">
            <summary>
            Open channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Close">
            <summary>
            Close channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Suspend">
            <summary>
            Suspend.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Resume">
            <summary>
            Resume.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
            <returns><see langword="true"/> if the specified message was processed successfully, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:StockSharp.Messages.IMessageChannel.NewOutMessage">
            <summary>
            New message event.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PassThroughMessageChannel">
            <summary>
            Message channel, which passes directly to the output all incoming messages.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PassThroughMessageChannel"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageChannel.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PassThroughMessageChannel"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.IMessageQueue">
            <summary>
            The interfaces described message queue.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageQueue.Enqueue(StockSharp.Messages.Message)">
            <summary>
            Enqueue the specified message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.IMessageQueue.TryDequeue(StockSharp.Messages.Message@,System.Boolean,System.Boolean)">
            <summary>
            Try dequeue a message.
            </summary>
            <param name="message">Message.</param>
            <param name="exitOnClose">Exit from method if the queue closed.</param>
            <param name="block">Block the operation.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="T:StockSharp.Messages.BaseMessageQueue">
            <summary>
            Message queue.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseMessageQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BaseMessageQueue"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageByLocalTimeQueue">
            <summary>
            Sorted by <see cref="P:StockSharp.Messages.Message.LocalTime"/> queue.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageByLocalTimeQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageByLocalTimeQueue"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageByLocalTimeQueue.Enqueue(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.MessageByOrderQueue">
            <summary>
            Sorted by incoming order queue.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageByOrderQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageByOrderQueue"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageByOrderQueue.Enqueue(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.InMemoryMessageChannel">
            <summary>
            Message channel, based on the queue and operate within a single process.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.#ctor(StockSharp.Messages.IMessageQueue,System.String,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.InMemoryMessageChannel"/>.
            </summary>
            <param name="queue">Message queue.</param>
            <param name="name">Channel name.</param>
            <param name="errorHandler">Error handler.</param>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.Name">
            <summary>
            Handler name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.MessageCount">
            <summary>
            Message queue count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.MaxMessageCount">
            <summary>
            Max message queue count.
            </summary>
            <remarks>
            The default value is -1, which corresponds to the size without limitations.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.SuspendMaxCount">
            <summary>
            Suspend on <see cref="P:StockSharp.Messages.InMemoryMessageChannel.SuspendTimeout"/> if message queue is more than the specified count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.SuspendTimeout">
            <summary>
            <see cref="P:StockSharp.Messages.InMemoryMessageChannel.SuspendMaxCount"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.Disabled">
            <summary>
            The channel cannot be opened.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.State">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Messages.InMemoryMessageChannel.StateChanged">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Open">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Close">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Messages.InMemoryMessageChannel.NewOutMessage">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.InMemoryMessageChannel"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.IOrderLogMarketDepthBuilder">
            <summary>
            Base interface for order book builder.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IOrderLogMarketDepthBuilder.Snapshot">
            <summary>
            Snapshot.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IOrderLogMarketDepthBuilder.Update(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Process order log item.
            </summary>
            <param name="item">Order log item.</param>
            <returns>Market depth.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderLogMarketDepthBuilder">
            <summary>
            Default implementation of <see cref="T:StockSharp.Messages.IOrderLogMarketDepthBuilder"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderLogMarketDepthBuilder.#ctor(StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderLogMarketDepthBuilder"/>.
            </summary>
            <param name="securityId">Security ID.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderLogMarketDepthBuilder.#ctor(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderLogMarketDepthBuilder"/>.
            </summary>
            <param name="depth">Messages containing quotes.</param>
        </member>
        <member name="T:StockSharp.Messages.IOriginalTransactionIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IOriginalTransactionIdMessage.OriginalTransactionId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IOriginalTransactionIdMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.ITransactionIdMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IPortfolioNameMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IPortfolioNameMessage.PortfolioName"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IPortfolioNameMessage.PortfolioName">
            <summary>
            Portfolio code name.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IScheduledTask">
            <summary>
            Interface described schedule task.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IScheduledTask.WorkingTime">
            <summary>
            Working schedule.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IScheduledTask.CanStart">
            <summary>
            Can start (not disabled, not already started).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IScheduledTask.CanStop">
            <summary>
            Can stop.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ISecurityIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.ISecurityIdMessage.SecurityId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISecurityIdMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.INullableSecurityIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.INullableSecurityIdMessage.SecurityId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.INullableSecurityIdMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ISeqNumMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.ISeqNumMessage.SeqNum"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISeqNumMessage.SeqNum">
            <summary>
            Sequence number.
            </summary>
            <remarks>Zero means no information.</remarks>
        </member>
        <member name="T:StockSharp.Messages.IServerTimeMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IServerTimeMessage.ServerTime"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IServerTimeMessage.ServerTime">
            <summary>
            Server time.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IStrategyIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.IStrategyIdMessage.StrategyId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IStrategyIdMessage.StrategyId">
            <summary>
            Strategy id.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ISubscriptionIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.ISubscriptionIdMessage.SubscriptionId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionIdMessage.SubscriptionId">
            <summary>
            Subscription id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionIdMessage.SubscriptionIds">
            <summary>
            Identifiers.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionIdMessage.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ISubscriptionMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.ISubscriptionMessage.IsSubscribe"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.FilterEnabled">
            <summary>
            Message contains fields with non default values.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.From">
            <summary>
            Start date, from which data needs to be retrieved.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.To">
            <summary>
            End date, until which data needs to be retrieved.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.IsSubscribe">
            <summary>
            The message is subscription.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.Skip">
            <summary>
            Skip count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.Count">
            <summary>
            Max count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ISubscriptionMessage.DataType">
            <summary>
            Data type info.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ITransactionIdMessage">
            <summary>
            The interface describing an message with <see cref="P:StockSharp.Messages.ITransactionIdMessage.TransactionId"/> property.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ITransactionIdMessage.TransactionId">
            <summary>
            Request identifier.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Level1Fields">
            <summary>
            Level1 fields of market-data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OpenPrice">
            <summary>
            Opening price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighPrice">
            <summary>
            Highest price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowPrice">
            <summary>
            Lowest price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ClosePrice">
            <summary>
            Closing price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTrade">
            <summary>
            Last trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.StepPrice">
            <summary>
            Step price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBid">
            <summary>
            Best bid.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAsk">
            <summary>
            Best ask.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ImpliedVolatility">
            <summary>
            Volatility (implied).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TheorPrice">
            <summary>
            Theoretical price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MinPrice">
            <summary>
            Price (min).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MaxPrice">
            <summary>
            Price (max).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BidsVolume">
            <summary>
            Bids volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BidsCount">
            <summary>
            Number of bids.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AsksVolume">
            <summary>
            Ask volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AsksCount">
            <summary>
            Number of asks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatility">
            <summary>
            Volatility (historical).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Delta">
            <summary>
            Delta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Gamma">
            <summary>
            Gamma.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Vega">
            <summary>
            Vega.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Theta">
            <summary>
            Theta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarginBuy">
            <summary>
            Initial margin to buy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarginSell">
            <summary>
            Initial margin to sell.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceStep">
            <summary>
            Minimum price step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.VolumeStep">
            <summary>
            Minimum volume step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradePrice">
            <summary>
            Last trade price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeVolume">
            <summary>
            Last trade volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Volume">
            <summary>
            Volume per session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AveragePrice">
            <summary>
            Average price per session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SettlementPrice">
            <summary>
            Settlement price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Change">
            <summary>
            Change,%.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidPrice">
            <summary>
            Best bid price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidVolume">
            <summary>
            Best buy volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskPrice">
            <summary>
            Best ask price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskVolume">
            <summary>
            Best sell volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Rho">
            <summary>
            Rho.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AccruedCouponIncome">
            <summary>
            Accrued coupon income (ACI).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighBidPrice">
            <summary>
            Maximum bid during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowAskPrice">
            <summary>
            Minimum ask during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Yield">
            <summary>
            Yield.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeTime">
            <summary>
            Time of last trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TradesCount">
            <summary>
            Number of trades.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.VWAP">
            <summary>
            Average price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeId">
            <summary>
            Last trade ID.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidTime">
            <summary>
            Best bid time.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskTime">
            <summary>
            Best ask time.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeUpDown">
            <summary>
            Is tick ascending or descending in price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeOrigin">
            <summary>
            Initiator of the last trade (buyer or seller).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Multiplier">
            <summary>
            Lot multiplier.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceEarnings">
            <summary>
            Price/profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ForwardPriceEarnings">
            <summary>
            Price target/profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceEarningsGrowth">
            <summary>
            Price/profit (increase).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceSales">
            <summary>
            Price/buy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceBook">
            <summary>
            Price/sell.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceCash">
            <summary>
            Price/amount.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceFreeCash">
            <summary>
            Price/amount (free).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Payout">
            <summary>
            Payments.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SharesOutstanding">
            <summary>
            Number of shares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SharesFloat">
            <summary>
            Shares Float.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.FloatShort">
            <summary>
            Float Short.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ShortRatio">
            <summary>
            Short.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnAssets">
            <summary>
            Return on assets.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnEquity">
            <summary>
            Return on equity.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnInvestment">
            <summary>
            Return on investment.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CurrentRatio">
            <summary>
            Liquidity (current).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.QuickRatio">
            <summary>
            Liquidity (instantaneous).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LongTermDebtEquity">
            <summary>
            Capital (long-term debt).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TotalDebtEquity">
            <summary>
            Capital (debt).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.GrossMargin">
            <summary>
            Assets margin (gross).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OperatingMargin">
            <summary>
            Assets margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ProfitMargin">
            <summary>
            Profit margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Beta">
            <summary>
            Beta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AverageTrueRange">
            <summary>
            ATR.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatilityWeek">
            <summary>
            Volatility (week).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatilityMonth">
            <summary>
            Volatility (month).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.IsSystem">
            <summary>
            System info.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Decimals">
            <summary>
            Number of digits in price after coma.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Duration">
            <summary>
            Duration.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.IssueSize">
            <summary>
            Number of issued contracts.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BuyBackDate">
            <summary>
            BuyBack date.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BuyBackPrice">
            <summary>
            BuyBack price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Turnover">
            <summary>
            Turnover.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SpreadMiddle">
            <summary>
            The middle of spread.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Dividend">
            <summary>
            The dividend amount on shares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AfterSplit">
            <summary>
            Price after split.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BeforeSplit">
            <summary>
            Price before split.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CommissionTaker">
            <summary>
            Commission (taker).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CommissionMaker">
            <summary>
            Commission (maker).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MinVolume">
            <summary>
            Minimum volume allowed in order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.UnderlyingMinVolume">
            <summary>
            Minimum volume allowed in order for underlying security.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CouponValue">
            <summary>
            Coupon value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CouponDate">
            <summary>
            Coupon date.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CouponPeriod">
            <summary>
            Coupon period.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarketPriceYesterday">
            <summary>
            Market price (yesterday).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarketPriceToday">
            <summary>
            Market price (today).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.VWAPPrev">
            <summary>
            VWAP (prev).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.YieldVWAP">
            <summary>
            Yield by VWAP.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.YieldVWAPPrev">
            <summary>
            Yield by VWAP (prev).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Index">
            <summary>
            Index.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Imbalance">
            <summary>
            Imbalance.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.UnderlyingPrice">
            <summary>
            Underlying price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MaxVolume">
            <summary>
            Maximum volume allowed in order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowBidPrice">
            <summary>
            Lowest bid during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighAskPrice">
            <summary>
            Highest ask during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeVolumeLow">
            <summary>
            Lowest last trade volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeVolumeHigh">
            <summary>
            Highest last trade volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OptionMargin">
            <summary>
            Option margin leverage.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OptionSyntheticMargin">
            <summary>
            Synthetic option position margin leverage.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowBidVolume">
            <summary>
            Volume of the lowest bid.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighAskVolume">
            <summary>
            Volume of the highest ask.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.UnderlyingBestBidPrice">
            <summary>
            Underlying asset best bid price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.UnderlyingBestAskPrice">
            <summary>
            Underlying asset best ask price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MedianPrice">
            <summary>
            Median price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighPrice52Week">
            <summary>
            The highest price for 52 weeks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowPrice52Week">
            <summary>
            The lowest price for 52 weeks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeStringId">
            <summary>
            Last trade ID (string).
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Level1ChangeMessage">
            <summary>
            The message containing the level1 market data.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Level1ChangeMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Level1ChangeMessage.SeqNum">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Level1ChangeMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.CopyTo(StockSharp.Messages.Level1ChangeMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.ToString">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Level1ChangeMessage.IsReloadFromServer">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.MarketDataTypes">
            <summary>
            Market-data types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.Level1">
            <summary>
            Level 1.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.MarketDepth">
            <summary>
            Market depth (order book).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.Trades">
            <summary>
            Tick trades.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleTimeFrame">
            <summary>
            Candles (time-frame).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleTick">
            <summary>
            Candle (tick).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleVolume">
            <summary>
            Candle (volume).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleRange">
            <summary>
            Candle (range).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandlePnF">
            <summary>
            Candle (X&amp;0).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleRenko">
            <summary>
            Candle (renko).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.Board">
            <summary>
            Board info.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleHeikinAshi">
            <summary>
            Heikin Ashi.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MarketDataBuildModes">
            <summary>
            Build modes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataBuildModes.LoadAndBuild">
            <summary>
            Request built data and build the missing data from trades, depths etc.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataBuildModes.Load">
            <summary>
            Request only built data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataBuildModes.Build">
            <summary>
            Build from trades, depths etc.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MarketDataMessage">
            <summary>
            Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.DataType2">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Arg">
            <summary>
            Additional argument for market data request.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Skip">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Count">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.MaxDepth">
            <summary>
            Max depth of requested order book. Uses in case <see cref="P:StockSharp.Messages.MarketDataMessage.DataType2"/> = <see cref="P:StockSharp.Messages.DataType.MarketDepth"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.NewsId">
            <summary>
            News id. Uses in case of request news text.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsCalcVolumeProfile">
            <summary>
            To perform the calculation <see cref="P:StockSharp.Messages.CandleMessage.PriceLevels"/>. By default, it is disabled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.BuildMode">
            <summary>
            Build mode.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.BuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.BuildField">
            <summary>
            Extra info for the <see cref="P:StockSharp.Messages.MarketDataMessage.BuildFrom"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.AllowBuildFromSmallerTimeFrame">
            <summary>
            Allow build candles from smaller timeframe.
            </summary>
            <remarks>
            Available only for <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsRegularTradingHours">
            <summary>
            Use only the regular trading hours for which data will be requested.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsFinishedOnly">
            <summary>
            Request <see cref="F:StockSharp.Messages.CandleStates.Finished"/> only candles.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.BoardCode">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.RefreshSpeed">
            <summary>
            Interval for data refresh.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.DepthBuilder">
            <summary>
            Order log to market depth builder.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.FillGaps">
            <summary>
            Try fill gaps.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.DoNotBuildOrderBookInrement">
            <summary>
            Pass through incremental <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.CopyTo(StockSharp.Messages.MarketDataMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.MessageOfflineModes">
            <summary>
            <see cref="T:StockSharp.Messages.Message"/> offline modes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageOfflineModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageOfflineModes.Ignore">
            <summary>
            Ignore offline mode and continue processing.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageOfflineModes.Cancel">
            <summary>
            Cancel message processing and create reply.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageBackModes">
            <summary>
            Message loopback modes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageBackModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageBackModes.Direct">
            <summary>
            Direct.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageBackModes.Chain">
            <summary>
            Via whole adapters chain.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Message">
            <summary>
            A message containing market data or command.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.LocalTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Message.Type">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Message.ExtensionInfo">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Message.IsBack">
            <summary>
            Is loopback message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.BackMode">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.Message.OfflineMode">
            <summary>
            Offline mode handling message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.Adapter">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.Message.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Message.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.Message.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.Message.CopyTo(StockSharp.Messages.Message)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapter">
            <summary>
            The base adapter converts messages <see cref="T:StockSharp.Messages.Message"/> to the command of the trading system and back.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedInMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedOutMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedResultMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.PossibleSupportedMessages">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedMarketDataTypes">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SecurityClassInfo">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.CandlesBuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.CheckTimeFrameByRequest">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.HeartbeatInterval">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsNativeIdentifiersPersistable">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsNativeIdentifiers">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsFullCandlesOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportSubscriptions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportCandlesUpdates">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportCandlesPriceLevels">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.Categories">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.StorageName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.Platform">
            <summary>
            Bit process, which can run the adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.FeatureName">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SecurityExtendedFields">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedOrderBookDepths">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportOrderBookIncrements">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportExecutionsPnL">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSecurityNewsOnly">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.OrderConditionType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.HeartbeatBeforConnect">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.Icon">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsAutoReplyOnTransactonalUnsubscription">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.EnqueueSubscriptions">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportTransactionLog">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsReplaceCommandEditCurrent">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.GenerateOrderBookFromLevel1">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.ReConnectionSettings">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.TransactionIdGenerator">
            <inheritdoc />
        </member>
        <member name="E:StockSharp.Messages.MessageAdapter.NewOutMessage">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
            <returns><see langword="true"/> if the specified message was processed successfully, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)">
            <summary>
            Send outgoing message and raise <see cref="E:StockSharp.Messages.MessageAdapter.NewOutMessage"/> event.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.InitMessageLocalTime(StockSharp.Messages.Message)">
            <summary>
            Initialize local timestamp <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutDisconnectMessage(System.Boolean)">
            <summary>
            Send to <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/> disconnect message.
            </summary>
            <param name="expected">Is disconnect expected.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutDisconnectMessage(System.Exception)">
            <summary>
            Send to <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/> disconnect message.
            </summary>
            <param name="error">Error info. Can be <see langword="null"/>.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutError(System.String)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.ErrorMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="description">Error details.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutError(System.Exception)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.ErrorMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="error">Error details.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendSubscriptionReply(System.Int64,System.Exception)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SubscriptionResponseMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="originalTransactionId">ID of the original message for which this message is a response.</param>
            <param name="error">Subscribe or unsubscribe error info. To be set if the answer.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendSubscriptionNotSupported(System.Int64)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SubscriptionResponseMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="originalTransactionId">ID of the original message for which this message is a response.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendSubscriptionFinished(System.Int64,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SubscriptionFinishedMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="originalTransactionId">ID of the original message for which this message is a response.</param>
            <param name="nextFrom"><see cref="P:StockSharp.Messages.SubscriptionFinishedMessage.NextFrom"/>.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendSubscriptionOnline(System.Int64)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="originalTransactionId">ID of the original message for which this message is a response.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendSubscriptionResult(StockSharp.Messages.ISubscriptionMessage)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/> or <see cref="T:StockSharp.Messages.SubscriptionFinishedMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="message">Subscription.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.GetTimeFrames(StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Get possible time-frames for the specified instrument.
            </summary>
            <param name="securityId">Security ID.</param>
            <param name="from">The initial date from which you need to get data.</param>
            <param name="to">The final date by which you need to get data.</param>
            <returns>Possible time-frames.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.GetCandleArgs(System.Type,StockSharp.Messages.SecurityId,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.GetHistoryStepSize(StockSharp.Messages.DataType,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.GetMaxCount(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.IsAllDownloadingSupported(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.IsSecurityRequired(StockSharp.Messages.DataType)">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.UseChannels">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IterationInterval">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.LookupTimeout">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsPositionsEmulationRequired">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.Name">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.MessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.OnPropertyChanged(System.String)">
            <summary>
            Raise <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="T:StockSharp.Messages.PassThroughMessageAdapter">
            <summary>
            Special adapter, which transmits directly to the output of all incoming messages.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PassThroughMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.MessageAdapterCategories">
            <summary>
            Message adapter categories.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Russia">
            <summary>
            Russia.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.US">
            <summary>
            US.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Europe">
            <summary>
            Europe.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Asia">
            <summary>
            Asia.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Stock">
            <summary>
            Stock.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.FX">
            <summary>
            FX.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Crypto">
            <summary>
            Cryptocurrencies.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.History">
            <summary>
            History.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.RealTime">
            <summary>
            Real-time.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Free">
            <summary>
            Free.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Paid">
            <summary>
            Paid.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Ticks">
            <summary>
            Ticks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Candles">
            <summary>
            Candles.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.MarketDepth">
            <summary>
            Order book.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Level1">
            <summary>
            Level1.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Transactions">
            <summary>
            Transactions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Tool">
            <summary>
            Tool.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Futures">
            <summary>
            Futures.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Options">
            <summary>
            Options.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageAdapterCategories.Commodities">
            <summary>
            Commodities.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapterCategoryAttribute">
            <summary>
            Specifies a categories for message adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterCategoryAttribute.Categories">
            <summary>
            Categories.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterCategoryAttribute.#ctor(StockSharp.Messages.MessageAdapterCategories)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageAdapterCategoryAttribute"/>.
            </summary>
            <param name="categories">Categories.</param>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapterStubAttribute">
            <summary>
            Shows the message adapter is stub.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterStubAttribute.PackageId">
            <summary>
            Package id.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageTypes">
            <summary>
            The types of messages.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Security">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Level1Change">
            <summary>
            <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderRegister">
            <summary>
            <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderReplace">
            <summary>
            <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderPairReplace">
            <summary>
            <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderCancel">
            <summary>
            <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderGroupCancel">
            <summary>
            <see cref="T:StockSharp.Messages.OrderGroupCancelMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Time">
            <summary>
            <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.News">
            <summary>
            <see cref="T:StockSharp.Messages.NewsMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderError">
            <summary>
            Order error (registration or cancel).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Portfolio">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleTimeFrame">
            <summary>
            <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.QuoteChange">
            <summary>
            <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Execution">
            <summary>
            <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PositionChange">
            <summary>
            <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioChange">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.MarketData">
            <summary>
            <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.NativeSecurityId">
            <summary>
            Association <see cref="T:StockSharp.Messages.SecurityId"/> with <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Connect">
            <summary>
            <see cref="T:StockSharp.Messages.ConnectMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Disconnect">
            <summary>
            <see cref="T:StockSharp.Messages.DisconnectMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLookup">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioLookup">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLookupResult">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Error">
            <summary>
            <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.BoardState">
            <summary>
            <see cref="T:StockSharp.Messages.BoardStateMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderStatus">
            <summary>
            <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Board">
            <summary>
            <see cref="T:StockSharp.Messages.BoardMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioLookupResult">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.ChangePassword">
            <summary>
            <see cref="T:StockSharp.Messages.ChangePasswordMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.ClearQueue">
            <summary>
            Clear message queue.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleTick">
            <summary>
            <see cref="T:StockSharp.Messages.TickCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleVolume">
            <summary>
            <see cref="T:StockSharp.Messages.VolumeCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleRange">
            <summary>
            <see cref="T:StockSharp.Messages.RangeCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandlePnF">
            <summary>
            <see cref="T:StockSharp.Messages.PnFCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleRenko">
            <summary>
            <see cref="T:StockSharp.Messages.RenkoCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Reset">
            <summary>
            <see cref="T:StockSharp.Messages.ResetMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SubscriptionFinished">
            <summary>
            <see cref="T:StockSharp.Messages.SubscriptionFinishedMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Remove">
            <summary>
            <see cref="T:StockSharp.Messages.RemoveMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.UserInfo">
            <summary>
            <see cref="T:StockSharp.Messages.UserInfoMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.UserLookup">
            <summary>
            <see cref="T:StockSharp.Messages.UserLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.UserLookupResult">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.BoardRequest">
            <summary>
            Board subscription request.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.BoardLookup">
            <summary>
            <see cref="T:StockSharp.Messages.BoardLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.BoardLookupResult">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.UserRequest">
            <summary>
            <see cref="T:StockSharp.Messages.UserRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.TimeFrameLookup">
            <summary>
            <see cref="T:StockSharp.Messages.TimeFrameLookupMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.TimeFrameInfo">
            <summary>
            <see cref="T:StockSharp.Messages.TimeFrameInfoMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityMappingRequest">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityMappingRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityMappingInfo">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityMappingInfoMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLegsRequest">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityLegsRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLegsInfo">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityLegsInfoMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.AdapterListRequest">
            <summary>
            <see cref="T:StockSharp.Messages.AdapterListRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.AdapterListFinished">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Command">
            <summary>
            <see cref="T:StockSharp.Messages.CommandMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.AdapterResponse">
            <summary>
            <see cref="T:StockSharp.Messages.AdapterResponseMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SubscriptionListRequest">
            <summary>
            <see cref="T:StockSharp.Messages.SubscriptionListRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SubscriptionListFinished">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityRouteListRequest">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityRouteListRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityRoute">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityRouteMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityRouteListFinished">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioRouteListRequest">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioRouteListRequestMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioRoute">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioRouteMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioRouteListFinished">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityMapping">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityMappingMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SubscriptionOnline">
            <summary>
            <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SubscriptionResponse">
            <summary>
            <see cref="T:StockSharp.Messages.SubscriptionResponseMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleHeikinAshi">
            <summary>
            <see cref="T:StockSharp.Messages.HeikinAshiCandleMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.ProcessSuspended">
            <summary>
            <see cref="T:StockSharp.Messages.ProcessSuspendedMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageTypeInfo">
            <summary>
            Extended info for <see cref="T:StockSharp.Messages.MessageTypes"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageTypeInfo.Type">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageTypeInfo.IsMarketData">
            <summary>
            <see cref="P:StockSharp.Messages.MessageTypeInfo.Type"/> is market-data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageTypeInfo.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageTypeInfo.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.#ctor(StockSharp.Messages.MessageTypes,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageTypeInfo"/>.
            </summary>
            <param name="type">Message type.</param>
            <param name="isMarketData"><see cref="P:StockSharp.Messages.MessageTypeInfo.Type"/> is market-data type.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.#ctor(StockSharp.Messages.MessageTypes,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessageTypeInfo"/>.
            </summary>
            <param name="type">Message type.</param>
            <param name="isMarketData"><see cref="P:StockSharp.Messages.MessageTypeInfo.Type"/> is market-data type.</param>
            <param name="displayName">Display name.</param>
            <param name="description">Description.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.OnEquals(StockSharp.Messages.MessageTypeInfo)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.MessageTypeInfo"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode" />
        </member>
        <member name="M:StockSharp.Messages.MessageTypeInfo.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.MessageTypeInfo"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.NewsPriorities">
            <summary>
            News priorities.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.NewsPriorities.Low">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.NewsPriorities.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.NewsPriorities.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.NewsMessage">
            <summary>
            The message contains information about the news.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Id">
            <summary>
            News ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Source">
            <summary>
            News source.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Headline">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Story">
            <summary>
            News text.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.ServerTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Url">
            <summary>
            News link in the internet.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Priority">
            <summary>
            News priority.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.ProductId">
            <summary>
            Product id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.ExpiryDate">
            <summary>
            Expiration date.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Attachments">
            <summary>
            Attachments.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.SeqNum">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.NewsMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.CopyTo(StockSharp.Messages.NewsMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.NtmOrderInfo">
            <summary>
            Negotiated Trades Mode information.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.NtmOrderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.NtmOrderInfo"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.Partner">
            <summary>
            Partner-organization.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.SettleDate">
            <summary>
            Execution date OTC.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.MatchRef">
            <summary>
            REPO NTM reference.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.SettleCode">
            <summary>
            Settlement code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.ForAccount">
            <summary>
            Owner of transaction (OTC trade).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NtmOrderInfo.CurrencyType">
            <summary>
            Currency code in ISO 4217 standard (OTC trade). Non-system trade parameter
            </summary>
        </member>
        <member name="M:StockSharp.Messages.NtmOrderInfo.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.NtmOrderInfo"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.NtmOrderInfo.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.NtmOrderInfo.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.OptionTypes">
            <summary>
            Option types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OptionTypes.Call">
            <summary>
            Call.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OptionTypes.Put">
            <summary>
            Put.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderCancelMessage">
            <summary>
            A message containing the data for the cancellation of the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.OrderId">
            <summary>
            ID cancellation order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.OrderStringId">
            <summary>
            Cancelling order id (as a string if the electronic board does not use a numeric representation of the identifiers).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.Balance">
            <summary>
            Cancelling balance.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.Volume">
            <summary>
            Cancelling volume. If not specified, then it canceled the entire balance.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.Side">
            <summary>
            Order side.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.CopyTo(StockSharp.Messages.OrderCancelMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderCondition">
            <summary>
            Base order condition (for example, for stop order algo orders).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCondition.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCondition.Parameters">
            <summary>
            Condition parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCondition.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderCondition.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.IRepoOrderCondition">
            <summary>
            The interface describing REPO order condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IRepoOrderCondition.IsRepo">
            <summary>
            REPO.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IRepoOrderCondition.RepoInfo">
            <summary>
            Information for REPO\REPO-M orders.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.INtmOrderCondition">
            <summary>
            The interface describing NTM order condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.INtmOrderCondition.IsNtm">
            <summary>
            NTM.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.INtmOrderCondition.NtmInfo">
            <summary>
            Information for Negotiated Trades Mode orders.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ITakeProfitOrderCondition">
            <summary>
            The interface describing take-profit order condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ITakeProfitOrderCondition.ClosePositionPrice">
            <summary>
            Close position price. <see langword="null"/> means close by market.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ITakeProfitOrderCondition.ActivationPrice">
            <summary>
            The absolute value of the price when the one is reached the protective strategy is activated.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ITakeProfitOrderCondition.IsTrailing">
            <summary>
            Trailing take-profit.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IStopLossOrderCondition">
            <summary>
            The interface describing stop-loss order condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IStopLossOrderCondition.ClosePositionPrice">
            <summary>
            Close position price. <see langword="null"/> means close by market.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IStopLossOrderCondition.ActivationPrice">
            <summary>
            The absolute value of the price when the one is reached the protective strategy is activated.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IStopLossOrderCondition.IsTrailing">
            <summary>
            Trailing stop-loss.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IWithdrawOrderCondition">
            <summary>
            The interface describing withdraw funds condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IWithdrawOrderCondition.IsWithdraw">
            <summary>
            Withdraw.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IWithdrawOrderCondition.WithdrawInfo">
            <summary>
            Withdraw info.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.BaseWithdrawOrderCondition">
            <summary>
            The base implementation <see cref="T:StockSharp.Messages.IWithdrawOrderCondition"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseWithdrawOrderCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BaseWithdrawOrderCondition"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BaseWithdrawOrderCondition.IsWithdraw">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.BaseWithdrawOrderCondition.WithdrawInfo">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderConditionAttribute">
            <summary>
            Attribute, applied to <see cref="T:StockSharp.Messages.IMessageAdapter"/>, to provide information about type of <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderConditionAttribute.ConditionType">
            <summary>
            <see cref="T:StockSharp.Messages.OrderCondition"/> type.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderConditionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderConditionAttribute"/>.
            </summary>
            <param name="conditionType"><see cref="T:StockSharp.Messages.OrderCondition"/> type.</param>
        </member>
        <member name="T:StockSharp.Messages.OrderGroupCancelMessage">
            <summary>
            The message containing the order group cancel filter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderGroupCancelMessage.IsStop">
            <summary>
            <see langword="true" />, if cancel only a stop orders, <see langword="false" /> - if regular orders, <see langword="null" /> - both.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderGroupCancelMessage.Side">
            <summary>
            Order side. If the value is <see langword="null" />, the direction does not use.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderGroupCancelMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderGroupCancelMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.CopyTo(StockSharp.Messages.OrderGroupCancelMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="T:StockSharp.Messages.OrderMessage">
            <summary>
            A message containing info about the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.PortfolioName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.OrderType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.UserOrderId">
            <summary>
            User's order ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.StrategyId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.BrokerCode">
            <summary>
            Broker firm code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.Condition">
            <summary>
            Order condition (e.g., stop- and algo- orders parameters).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.Comment">
            <summary>
            Placed order comment.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.IsMargin">
            <summary>
            Is margin enabled.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderMessage.CopyTo(StockSharp.Messages.OrderMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderPairReplaceMessage">
            <summary>
            The message containing the information for modify order's pair.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderPairReplaceMessage.Message1">
            <summary>
            The message containing the information for modify the first order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderPairReplaceMessage.Message2">
            <summary>
            The message containing the information for modify the second order.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderRegisterMessage">
            <summary>
            The message containing the information for the order registration.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Price">
            <summary>
            Order price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Volume">
            <summary>
            Number of contracts in the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.VisibleVolume">
            <summary>
            Visible quantity of contracts in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Side">
            <summary>
            Order side (buy or sell).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.TillDate">
            <summary>
            Order expiry time. The default is <see langword="null" />, which mean (GTC).
            </summary>
            <remarks>
            If the value is equal <see langword="null" />, order will be GTC (good til cancel). Or uses exact date.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.TimeInForce">
            <summary>
            Limit order time in force.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.IsMarketMaker">
            <summary>
            Is the order of market-maker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Slippage">
            <summary>
            Slippage in trade price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.IsManual">
            <summary>
            Is order manual.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.MinOrderVolume">
            <summary>
            Minimum quantity of an order to be executed.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.PositionEffect">
            <summary>
            Position effect.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.PostOnly">
            <summary>
            Post-only order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Leverage">
            <summary>
            Margin leverage.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.CopyTo(StockSharp.Messages.OrderRegisterMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.ToString">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.ClosePositionType">
            <summary>
            What type of Position to Close
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderReplaceMessage">
            <summary>
            The message containing the information for modify order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderId">
            <summary>
            Modified order id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderStringId">
            <summary>
            Modified order id (as a string if the electronic board does not use a numeric representation of the identifiers).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderPrice">
            <summary>
            Replaced price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderVolume">
            <summary>
            Replaced volume.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.CopyTo(StockSharp.Messages.OrderReplaceMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderStates">
            <summary>
            Order states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.None">
            <summary>
            Not sent to the trading system.
            </summary>
            <remarks>
            The original state of the order, when the transaction is not sent to the trading system.
            </remarks>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Active">
            <summary>
            The order is accepted by the exchange and is active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Done">
            <summary>
            The order is no longer active on an exchange (it was fully matched or cancelled).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Failed">
            <summary>
            The order is not accepted by the trading system.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Pending">
            <summary>
            Pending registration.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderStatus">
            <summary>
            System order states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.SentToServer">
            <summary>
            The transaction is sent to the server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.ReceiveByServer">
            <summary>
            The transaction is received by the server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.GateError">
            <summary>
            Sending transaction error.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Accepted">
            <summary>
            The order is accepted by the exchange.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotDone">
            <summary>
            The order is not accepted by the exchange.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotValidated">
            <summary>
            The transaction did not pass server check.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotValidatedLimit">
            <summary>
            The transaction did not pass server limits.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.AcceptedByManager">
            <summary>
            The transaction was approved by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotAcceptedByManager">
            <summary>
            The transaction did not approved by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.CanceledByManager">
            <summary>
            The transaction was cancelled by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotSupported">
            <summary>
            The transaction is not supported by server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotSigned">
            <summary>
            Digital signature fail.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.SentToCanceled">
            <summary>
            Cancel pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Cancelled">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Matched">
            <summary>
            Matched.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.RejectedBySystem">
            <summary>
            Reject by server.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderStatusMessage">
            <summary>
            A message requesting current registered orders and trades.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.Skip">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.Count">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.States">
            <summary>
            Filter order by the specified states.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.CopyTo(StockSharp.Messages.OrderStatusMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.OrderTypes">
            <summary>
            Order types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Limit">
            <summary>
            Limit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Market">
            <summary>
            Market.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Conditional">
            <summary>
            Conditional (stop-loss, take-profit).
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PortfolioLookupMessage">
            <summary>
            Message portfolio lookup for specified criteria.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupMessage.StrategyId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupMessage.Side">
            <summary>
            Side.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.CopyTo(StockSharp.Messages.PortfolioLookupMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.PortfolioStates">
            <summary>
            Portfolio states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PortfolioStates.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PortfolioStates.Blocked">
            <summary>
            Blocked.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PortfolioMessage">
            <summary>
            The message contains information about portfolio.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.PortfolioName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.Currency">
            <summary>
            Portfolio currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.Skip">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.Count">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.CopyTo(StockSharp.Messages.PortfolioMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.PortfolioRouteListRequestMessage">
            <summary>
            Portfolio routes list request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioRouteListRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.PortfolioRouteListRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioRouteListRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioRouteListRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioRouteListRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.PortfolioRouteMessage">
            <summary>
            Portfolio route response message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioRouteMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.PortfolioRouteMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioRouteMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PortfolioRouteMessage.PortfolioName">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PortfolioRouteMessage.CopyTo(StockSharp.Messages.PortfolioRouteMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.PositionChangeTypes">
            <summary>
            Type of the changes in <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BeginValue">
            <summary>
            Initial value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentValue">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BlockedValue">
            <summary>
            Blocked.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentPrice">
            <summary>
            Position price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.AveragePrice">
            <summary>
            Average price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.UnrealizedPnL">
            <summary>
            Unrealized profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.RealizedPnL">
            <summary>
            Realized profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.VariationMargin">
            <summary>
            Variation margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Leverage">
            <summary>
            Margin leverage.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentValueInLots">
            <summary>
            Current value (in lots).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.State">
            <summary>
            Portfolio state.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.ExpirationDate">
            <summary>
            Expiration date.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CommissionTaker">
            <summary>
            Commission (taker).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CommissionMaker">
            <summary>
            Commission (maker).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.SettlementPrice">
            <summary>
            Settlement price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BuyOrdersCount">
            <summary>
            Orders (bids).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.SellOrdersCount">
            <summary>
            Orders (asks).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BuyOrdersMargin">
            <summary>
            Margin (buy).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.SellOrdersMargin">
            <summary>
            Margin (sell).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.OrdersMargin">
            <summary>
            Orders (margin).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.OrdersCount">
            <summary>
            Orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.TradesCount">
            <summary>
            Trades.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PositionChangeMessage">
            <summary>
            The message contains information about the position changes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.PortfolioName">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.LimitType">
            <summary>
            Limit type for Т+ market.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.Description">
            <summary>
            Text position description.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.StrategyId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.Side">
            <summary>
            Side.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.CopyTo(StockSharp.Messages.PositionChangeMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.ProcessSuspendedMessage">
            <summary>
            Process suspended action.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ProcessSuspendedMessage.Arg">
            <summary>
            Additional argument.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ProcessSuspendedMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ProcessSuspendedMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ProcessSuspendedMessage.#ctor(StockSharp.Messages.IMessageAdapter,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ProcessSuspendedMessage"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="arg">Additional argument.</param>
        </member>
        <member name="M:StockSharp.Messages.ProcessSuspendedMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ProcessSuspendedMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.QuoteChangeActions">
            <summary>
            Change actions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeActions.New">
            <summary>
            New quote for <see cref="P:StockSharp.Messages.QuoteChange.StartPosition"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeActions.Update">
            <summary>
            Update quote for <see cref="P:StockSharp.Messages.QuoteChange.StartPosition"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeActions.Delete">
            <summary>
            Delete quotes from <see cref="P:StockSharp.Messages.QuoteChange.StartPosition"/> till <see cref="P:StockSharp.Messages.QuoteChange.EndPosition"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.QuoteConditions">
            <summary>
            Quote conditions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteConditions.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteConditions.Indicative">
            <summary>
            Indicative.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.QuoteChange">
            <summary>
            Market depth quote representing bid or ask.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.#ctor(System.Decimal,System.Decimal,System.Nullable{System.Int32},StockSharp.Messages.QuoteConditions)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.QuoteChange"/>.
            </summary>
            <param name="price">Quote price.</param>
            <param name="volume">Quote volume.</param>
            <param name="ordersCount">Orders count.</param>
            <param name="condition">Quote condition.</param>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Price">
            <summary>
            Quote price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Volume">
            <summary>
            Quote volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.ExtensionInfo">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.OrdersCount">
            <summary>
            Orders count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.StartPosition">
            <summary>
            Start position, related for <see cref="P:StockSharp.Messages.QuoteChange.Action"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.EndPosition">
            <summary>
            End position, related for <see cref="P:StockSharp.Messages.QuoteChange.Action"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Action">
            <summary>
            Change action.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Condition">
            <summary>
            Quote condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.InnerQuotes">
            <summary>
            Collection of enclosed quotes, which are combined into a single quote.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.QuoteChangeStates">
            <summary>
            Order book states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeStates.SnapshotStarted">
            <summary>
            Snapshot started.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeStates.SnapshotBuilding">
            <summary>
            Snapshot building.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeStates.SnapshotComplete">
            <summary>
            Snapshot complete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.QuoteChangeStates.Increment">
            <summary>
            Incremental.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.QuoteChangeMessage">
            <summary>
            Messages containing quotes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Bids">
            <summary>
            Quotes to buy.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Asks">
            <summary>
            Quotes to sell.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.ServerTime">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.IsSorted">
            <summary>
            Flag sorted by price quotes (<see cref="P:StockSharp.Messages.QuoteChangeMessage.Bids"/> by descending, <see cref="P:StockSharp.Messages.QuoteChangeMessage.Asks"/> by ascending).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.BuildFrom">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.IsFiltered">
            <summary>
            The quote change contains filtered quotes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.State">
            <summary>
            Order book state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.HasPositions">
            <summary>
            Determines a <see cref="P:StockSharp.Messages.QuoteChange.StartPosition"/> initialized.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.SeqNum">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.CopyTo(StockSharp.Messages.QuoteChangeMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.ReConnectionSettings">
            <summary>
            Connection tracking settings <see cref="T:StockSharp.Messages.IMessageAdapter"/> with a server.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ReConnectionSettings"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.Interval">
            <summary>
            The interval at which attempts will establish a connection. The default value is 10 seconds.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.AttemptCount">
            <summary>
            The number of attempts to establish the initial connection, if it has not been established (timeout, network failure, etc.). The default value is 0. To establish infinite number uses -1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.ReAttemptCount">
            <summary>
            The number of attempts to reconnect if the connection was lost during the operation. The default value is 100. To establish infinite number uses -1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.TimeOutInterval">
            <summary>
            Timeout successful connection / disconnection. If the value is <see cref="F:System.TimeSpan.Zero"/>, the monitoring is performed. The default value is 30 seconds.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.WorkingTime">
            <summary>
            Schedule, during which it is necessary to make the connection. For example, there is no need to track connection when trading on the exchange finished.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.RemoveTypes">
            <summary>
            Removing object types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.RemoveTypes.Security">
            <summary>
            Security.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.RemoveTypes.Portfolio">
            <summary>
            Portfolio.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.RemoveTypes.Exchange">
            <summary>
            Exchange.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.RemoveTypes.Board">
            <summary>
            Board.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.RemoveTypes.User">
            <summary>
            User.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.RemoveMessage">
            <summary>
            Remove object request (security, portfolio etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RemoveMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RemoveMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RemoveMessage.RemoveType">
            <summary>
            Removing object type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RemoveMessage.RemoveId">
            <summary>
            Removing object id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RemoveMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.RemoveMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RemoveMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.RepoOrderInfo">
            <summary>
            REPO info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RepoOrderInfo"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Partner">
            <summary>
            Partner-organization.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Term">
            <summary>
            REPO expiration.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Rate">
            <summary>
            Repo rate, in percentage.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.BlockSecurities">
            <summary>
            Blocking code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.RefundRate">
            <summary>
            The rate of fixed compensation payable in the event that the second part of the repo, the percentage.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.MatchRef">
            <summary>
            REPO NTM reference.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SettleCode">
            <summary>
            Settlement code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SecondPrice">
            <summary>
            REPO second price part.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SettleDate">
            <summary>
            Execution date OTC.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.StartDiscount">
            <summary>
            REPO-M the begin value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.LowerDiscount">
            <summary>
            REPO-M the lower limit value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.UpperDiscount">
            <summary>
            REPO-M the upper limit value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Value">
            <summary>
            REPO-M volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.IsModified">
            <summary>
            REPO-M.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RepoOrderInfo"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.ResetMessage">
            <summary>
            Reset state message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ResetMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ResetMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ResetMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ResetMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.SecurityCode">
            <summary>
            Security code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Native">
            <summary>
            Native (internal) trading system security id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.NativeAsInt">
            <summary>
            Native (internal) trading system security id represented as integer.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.SecurityType">
            <summary>
            Security type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Sedol">
            <summary>
            ID in SEDOL format (Stock Exchange Daily Official List).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Cusip">
            <summary>
            ID in CUSIP format (Committee on Uniform Securities Identification Procedures).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Isin">
            <summary>
            ID in ISIN format (International Securities Identification Number).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Ric">
            <summary>
            ID in RIC format (Reuters Instrument Code).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Bloomberg">
            <summary>
            ID in Bloomberg format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.IQFeed">
            <summary>
            ID in IQFeed format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.InteractiveBrokers">
            <summary>
            ID in Interactive Brokers format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Plaza">
            <summary>
            ID in Plaza format.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.GetHashCode">
            <summary>
            Get the hash code of the object.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Equals(System.Object)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.SecurityId"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Equals(StockSharp.Messages.SecurityId)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.SecurityId"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.op_Inequality(StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId)">
            <summary>
            Compare the inequality of two identifiers.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" />, if identifiers are equal, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.op_Equality(StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId)">
            <summary>
            Compare two identifiers for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" />, if the specified identifiers are equal, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="F:StockSharp.Messages.SecurityId.AssociatedBoardCode">
            <summary>
            Board code for combined security.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.CreateAssociated(System.String)">
            <summary>
            Create security id with board code set as <see cref="F:StockSharp.Messages.SecurityId.AssociatedBoardCode"/>.
            </summary>
            <param name="securityCode">Security code.</param>
            <returns>Security ID.</returns>
        </member>
        <member name="F:StockSharp.Messages.SecurityId.Money">
            <summary>
            "Money" security id.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityId.News">
            <summary>
            "News" security id.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.StringToSecurityIdTypeConverter">
            <summary>
            Converter to use with <see cref="T:StockSharp.Messages.SecurityId"/> properties.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.StringToSecurityIdTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.StringToSecurityIdTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityIdGenerator">
            <summary>
            The instrument identifiers generator <see cref="T:StockSharp.Messages.SecurityId"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityIdGenerator.Delimiter">
            <summary>
            The delimiter between the instrument code and the class.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdGenerator.GenerateId(System.String,System.String)">
            <summary>
            Generate <see cref="T:StockSharp.Messages.SecurityId"/> security.
            </summary>
            <param name="secCode">Security code.</param>
            <param name="boardCode">Board code.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityId"/> security.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdGenerator.Split(System.String,System.Boolean)">
            <summary>
            To get instrument codes and boards by the instrument identifier.
            </summary>
            <param name="securityId">The instrument identifier <see cref="T:StockSharp.Messages.SecurityId"/>.</param>
            <param name="nullIfInvalid">Return <see langword="null"/> in case of <paramref name="securityId"/> is invalid value.</param>
            <returns>The instrument code <see cref="P:StockSharp.Messages.SecurityId.SecurityCode"/> and the board code <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityIdMapping">
            <summary>
            Security identifier mapping.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityIdMapping.StockSharpId">
            <summary>
            StockSharp format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityIdMapping.AdapterId">
            <summary>
            Adapter format.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdMapping.op_Implicit(System.Collections.Generic.KeyValuePair{StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId})~StockSharp.Messages.SecurityIdMapping">
            <summary>
            Cast <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object to the type <see cref="T:StockSharp.Messages.SecurityIdMapping"/>.
            </summary>
            <param name="pair"><see cref="T:System.Collections.Generic.KeyValuePair`2"/> value.</param>
            <returns><see cref="T:StockSharp.Messages.SecurityIdMapping"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdMapping.op_Explicit(StockSharp.Messages.SecurityIdMapping)~System.Collections.Generic.KeyValuePair{StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId}">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.SecurityIdMapping"/> to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="mapping"><see cref="T:StockSharp.Messages.SecurityIdMapping"/> value.</param>
            <returns><see cref="T:System.Collections.Generic.KeyValuePair`2"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdMapping.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityIdMapping.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityIdMapping.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.SecurityLegsInfoMessage">
            <summary>
            Security legs result message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLegsInfoMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityLegsInfoMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLegsInfoMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityLegsInfoMessage.Legs">
            <summary>
            Security legs.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLegsInfoMessage.CopyTo(StockSharp.Messages.SecurityLegsInfoMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityLegsInfoMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityLegsRequestMessage">
            <summary>
            Security legs request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLegsRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityLegsRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLegsRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityLegsRequestMessage.Like">
            <summary>
            The filter for securities search.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLegsRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityLegsRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityLookupMessage">
            <summary>
            Message security lookup for specified criteria.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.SecurityTypes">
            <summary>
            Securities types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.OnlySecurityId">
            <summary>
            Request only <see cref="P:StockSharp.Messages.SecurityMessage.SecurityId"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.Skip">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.Count">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.SecurityIds">
            <summary>
            Security identifiers.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.CopyTo(StockSharp.Messages.SecurityLookupMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityMappingInfoMessage">
            <summary>
            Security mapping result message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingInfoMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityMappingInfoMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingInfoMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingInfoMessage.Mapping">
            <summary>
            Security identifier mapping.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingInfoMessage.CopyTo(StockSharp.Messages.SecurityMappingInfoMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingInfoMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityMappingMessage">
            <summary>
            Security mapping result message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityMappingMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.IsDelete">
            <summary>
            Remove security mapping.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.Mapping">
            <summary>
            Security identifier mapping.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.StorageName">
            <summary>
            Storage name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityMappingMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityMappingRequestMessage">
            <summary>
            Security mapping request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityMappingRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMappingRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityMappingRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityMappingRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityMessage">
            <summary>
            A message containing info about the security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Name">
            <summary>
            Security name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.ShortName">
            <summary>
            Short security name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.VolumeStep">
            <summary>
            Minimum volume step.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.MinVolume">
            <summary>
            Minimum volume allowed in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.MaxVolume">
            <summary>
            Maximum volume allowed in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Multiplier">
            <summary>
            Lot multiplier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Decimals">
            <summary>
            Number of digits in price after coma.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.PriceStep">
            <summary>
            Minimum price step.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SecurityType">
            <summary>
            Security type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.CfiCode">
            <summary>
            Type in ISO 10962 standard.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.ExpiryDate">
            <summary>
            Security expiration date (for derivatives - expiration, for bonds — redemption).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SettlementDate">
            <summary>
            Settlement date for security (for derivatives and bonds).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.UnderlyingSecurityCode">
            <summary>
            Underlying asset code, on which the current security is based.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.UnderlyingSecurityMinVolume">
            <summary>
            Minimum volume allowed in order for underlying security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Strike">
            <summary>
            Option strike price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.OptionType">
            <summary>
            Option type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.BinaryOptionType">
            <summary>
            Type of binary option.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Class">
            <summary>
            Security class.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.IssueSize">
            <summary>
            Number of issued contracts.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.IssueDate">
            <summary>
            Date of issue.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.UnderlyingSecurityType">
            <summary>
            Underlying security type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Shortable">
            <summary>
            Can have short positions.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.BasketCode">
            <summary>
            Basket security type. Can be <see langword="null"/> in case of regular security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.BasketExpression">
            <summary>
            Basket security expression. Can be <see langword="null"/> in case of regular security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.FaceValue">
            <summary>
            Face value.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.PrimaryId">
            <summary>
            Identifier on primary exchange.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.CopyTo(StockSharp.Messages.SecurityMessage,System.Boolean)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <param name="copyOriginalTransactionId">Copy <see cref="P:StockSharp.Messages.IOriginalTransactionIdMessage.OriginalTransactionId"/>.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.CopyTo(StockSharp.Messages.SecurityMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.CopyEx(StockSharp.Messages.SecurityMessage,System.Boolean)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <param name="copyBase">Copy <see cref="T:StockSharp.Messages.BaseSubscriptionIdMessage`1"/>.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityRouteListRequestMessage">
            <summary>
            Security routes list request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityRouteListRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityRouteListRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityRouteListRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SecurityRouteListRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityRouteListRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityRouteMessage">
            <summary>
            Security route response message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityRouteMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityRouteMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityRouteMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityRouteMessage.SecurityId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SecurityRouteMessage.SecurityDataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityRouteMessage.CopyTo(StockSharp.Messages.SecurityRouteMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SecurityStates">
            <summary>
            Security states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityStates.Trading">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityStates.Stoped">
            <summary>
            Suspended.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.SecurityTypes">
            <summary>
            Securities types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Stock">
            <summary>
            Shares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Future">
            <summary>
            Future contract.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Option">
            <summary>
            Options contract.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Index">
            <summary>
            Index.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Bond">
            <summary>
            Bond.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Warrant">
            <summary>
            Warrant.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Forward">
            <summary>
            Forward.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Swap">
            <summary>
            Swap.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Commodity">
            <summary>
            Commodity.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Cfd">
            <summary>
            CFD.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Weather">
            <summary>
            Weather.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Fund">
            <summary>
            Mutual funds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Adr">
            <summary>
            American Depositary Receipts.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.CryptoCurrency">
            <summary>
            Cryptocurrency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Etf">
            <summary>
            ETF.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.MultiLeg">
            <summary>
            Multi leg.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Loan">
            <summary>
            Loan.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Gdr">
            <summary>
            Global Depositary Receipts.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Receipt">
            <summary>
            Receipt.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Indicator">
            <summary>
            Indicator.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Strategy">
            <summary>
            Strategy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Volatility">
            <summary>
            Volatility.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ShrinkRules">
            <summary>
            Price rounding rules.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ShrinkRules.Auto">
            <summary>
            Automatically to determine rounding to lesser or to bigger value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ShrinkRules.Less">
            <summary>
            To round to lesser value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ShrinkRules.More">
            <summary>
            To round to bigger value.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Sides">
            <summary>
            Sides.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Sides.Buy">
            <summary>
            Buy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Sides.Sell">
            <summary>
            Sell.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.SubscriptionFinishedMessage">
            <summary>
            Market data request finished message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionFinishedMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SubscriptionFinishedMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SubscriptionFinishedMessage.NextFrom">
            <summary>
            Recommended value for next <see cref="P:StockSharp.Messages.ISubscriptionMessage.From"/> (in case of partial requests).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionFinishedMessage.CopyTo(StockSharp.Messages.SubscriptionFinishedMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SubscriptionFinishedMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SubscriptionListRequestMessage">
            <summary>
            Subscriptions list request message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionListRequestMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SubscriptionListRequestMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SubscriptionListRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SubscriptionListRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SubscriptionListRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SubscriptionOnlineMessage">
            <summary>
            Subscription goes online message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SubscriptionOnlineMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SubscriptionOnlineMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionOnlineMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SubscriptionOnlineMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionOnlineMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.SubscriptionResponseMessage">
            <summary>
            Subscription response message.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SubscriptionResponseMessage.NotSupported">
            <summary>
            Not supported error.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SubscriptionResponseMessage.Error">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.SubscriptionResponseMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.SubscriptionResponseMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SubscriptionResponseMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionResponseMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SubscriptionResponseMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionResponseMessage.CopyTo(StockSharp.Messages.SubscriptionResponseMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.SubscriptionResponseMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.TimeFrameInfoMessage">
            <summary>
            Time-frames search result message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameInfoMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeFrameInfoMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameInfoMessage.TimeFrames">
            <summary>
            Possible time-frames.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameInfoMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.TimeFrameInfoMessage.CopyTo(StockSharp.Messages.TimeFrameInfoMessage)">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.TimeFrameInfoMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.TimeFrameLookupMessage">
            <summary>
            Message to request supported time-frames.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeFrameLookupMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameLookupMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.TimeFrameLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TimeFrameLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.TimeInForce">
            <summary>
            Limit order time in force.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.PutInQueue">
            <summary>
            Good til cancelled.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.MatchOrCancel">
            <summary>
            Fill Or Kill.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.CancelBalance">
            <summary>
            Immediate Or Cancel.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TimeMessage">
            <summary>
            The message contains information about the current time.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.TimeMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.ServerTime">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ClosePositionsType">
            <summary>
            Tony 05: close the Positions of the following types
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.All">
            <summary>
            Close All Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.Lossing">
            <summary>
            Close All Lossing Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.Winning">
            <summary>
            Close All Winning Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.Long">
            <summary>
            Close All Long
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.Short">
            <summary>
            Close All Short
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.LongHedge">
            <summary>
            Close All Hedge for Long Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.ShortHedge">
            <summary>
            Close All Hedge for Short Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.WinningHedge">
            <summary>
            Close All Winning Hedge for Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.LossingHedge">
            <summary>
            Close All Lossing Hedge for Positions
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ClosePositionsType.AllHedge">
            <summary>
            Close All Hedge for Positions
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderPositionEffects">
            <summary>
            Indicates whether the resulting position after a trade should be an opening position or closing position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.Default">
            <summary>
            Default behaviour.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.OpenOnly">
            <summary>
            A trade should open a position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.CloseOnly">
            <summary>
            A trade should bring the position towards zero, i.e. close as much as possible of any existing position and open an opposite position for any remainder.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.HedgeLong">
            <summary>
            A trade to hedge All Long Positions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.HedgeShort">
            <summary>
            A trade to hedge All Short Positions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.HedgeAll">
            <summary>
            A trade to hedge All Positions.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.SetSafety">
            <summary>
            A trade to Set Safety Net
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.SetBreakEven">
            <summary>
            A trade to Set Safety Net
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.SetTakeProfit">
            <summary>
            A trade to Set Take Profit target
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.ReverseDirection">
            <summary>
            Hedge or Close existing trades and open trades in opposite direction
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderPositionEffects.EscapeWithoutLoss">
            <summary>
            Hedge or Close existing trades and open trades in opposite direction
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TPlusLimits">
            <summary>
            Т+ limit types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T0">
            <summary>
            Т+0.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T1">
            <summary>
            Т+1.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T2">
            <summary>
            Т+2.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.Tx">
            <summary>
            Т+x.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.UnitTypes">
            <summary>
            Measure units.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Absolute">
            <summary>
            The absolute value. Incremental change is a given number.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Percent">
            <summary>
            Percents.Step change - one hundredth of a percent.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Step">
            <summary>
            Price step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Limit">
            <summary>
            The limited value. This unit allows to set a specific change number, which cannot be used in arithmetic operations <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Unit">
            <summary>
            Special class, allows to set the value as a percentage, absolute, points and pips values.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor">
            <summary>
            Create unit.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal)">
            <summary>
            Create absolute value <see cref="F:StockSharp.Messages.UnitTypes.Absolute"/>.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal,StockSharp.Messages.UnitTypes)">
            <summary>
            Create a value of types <see cref="F:StockSharp.Messages.UnitTypes.Absolute"/> and <see cref="F:StockSharp.Messages.UnitTypes.Percent"/>.
            </summary>
            <param name="value">Value.</param>
            <param name="type">Measure unit.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal,StockSharp.Messages.UnitTypes,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}})">
            <summary>
            Create a value of types <see cref="F:StockSharp.Messages.UnitTypes.Point"/> and <see cref="F:StockSharp.Messages.UnitTypes.Step"/>.
            </summary>
            <param name="value">Value.</param>
            <param name="type">Measure unit.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).</param>
        </member>
        <member name="P:StockSharp.Messages.Unit.Type">
            <summary>
            Measure unit.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Unit.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Unit.GetTypeValue">
            <summary>
            The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.CompareTo(StockSharp.Messages.Unit)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Decimal)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Decimal"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Int32)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Int32"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Decimal">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Nullable{System.Decimal}">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to nullable <see cref="T:System.Decimal"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Double)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Double"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Double">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Nullable{System.Double}">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to nullable <see cref="T:System.Double"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Addition(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Add the two objects <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of addition.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Multiply(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Multiply the two objects <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Subtraction(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Subtract the unit <see cref="T:StockSharp.Messages.Unit"/> from another.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Division(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Divide the unit <see cref="T:StockSharp.Messages.Unit"/> to another.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.OnEquals(StockSharp.Messages.Unit)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Equals(System.Object)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Inequality(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Compare two values in the inequality (if the value of different types, the conversion will be used).
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the values are equals, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Equality(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Compare two values for equality (if the value of different types, the conversion will be used).
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the values are equals, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.Unit.GetTypeSuffix(StockSharp.Messages.UnitTypes)">
            <summary>
            Get string suffix.
            </summary>
            <param name="type">Measure unit.</param>
            <returns>String suffix.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Convert(StockSharp.Messages.UnitTypes,System.Boolean)">
            <summary>
            Cast the value to another type.
            </summary>
            <param name="destinationType">Destination value type.</param>
            <param name="throwException">Throw exception in case of impossible conversion. Otherwise, returns <see langword="null"/>.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Convert(StockSharp.Messages.UnitTypes,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}},System.Boolean)">
            <summary>
            Cast the value to another type.
            </summary>
            <param name="destinationType">Destination value type.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).</param>
            <param name="throwException">Throw exception in case of impossible conversion. Otherwise, returns <see langword="null"/>.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_GreaterThan(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is greater than the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is greater than the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_GreaterThanOrEqual(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is greater than or equal to the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is greater than or equal the second, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_LessThan(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is less than the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is less than the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_LessThanOrEqual(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is less than or equal to the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is less than or equal to the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_UnaryNegation(StockSharp.Messages.Unit)">
            <summary>
            Get the value with the opposite sign from the value <see cref="P:StockSharp.Messages.Unit.Value"/>.
            </summary>
            <param name="u">Unit.</param>
            <returns>Opposite value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.UnitHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Int32)">
            <summary>
            Convert the <see cref="T:System.Int32"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Double)">
            <summary>
            Convert the <see cref="T:System.Double"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Decimal)">
            <summary>
            Convert the <see cref="T:System.Decimal"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.ToUnit(System.String,System.Boolean,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}})">
            <summary>
            Convert string to <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="str">String value of <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="throwIfNull">Throw <see cref="T:System.ArgumentNullException"/> if the specified string is empty.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="T:System.Type"/> (price or volume steps).</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Times(StockSharp.Messages.Unit,System.Int32)">
            <summary>
            Multiple <see cref="P:StockSharp.Messages.Unit.Value"/> on the specified times.
            </summary>
            <param name="unit">Unit.</param>
            <param name="times">Multiply value.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:StockSharp.Messages.UserInfoMessage">
            <summary>
            The message contains information about user.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Login">
            <summary>
            Login.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Password">
            <summary>
            Portfolio currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.TransactionId">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.IsBlocked">
            <summary>
            Is blocked.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Id">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Phone">
            <summary>
            Phone.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Homepage">
            <summary>
            Web site.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Skype">
            <summary>
            Skype.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Gender">
            <summary>
            Gender.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.IsSubscription">
            <summary>
            Is the mail-out enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Balance">
            <summary>
            Balance.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Avatar">
            <summary>
            Avatar.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.AuthToken">
            <summary>
            Token.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.CreationDate">
            <summary>
            Date of registration.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.IpRestrictions">
            <summary>
            IP address restrictions.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Permissions">
            <summary>
            Permission set.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.CanPublish">
            <summary>
            Can publish NuGet packages.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.IsAgreementAccepted">
            <summary>
            Is EULA accepted.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.UploadLimit">
            <summary>
            Upload size limit.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.Features">
            <summary>
            Available features.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserInfoMessage.IsTrialVerified">
            <summary>
            Is trial verified.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UserInfoMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.UserInfoMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UserInfoMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.UserInfoMessage.CopyTo(StockSharp.Messages.UserInfoMessage)">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.UserLookupMessage">
            <summary>
            Message users lookup for specified criteria.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UserLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.UserLookupMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.DataType">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.Like">
            <summary>
            The filter for user search.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.Own">
            <summary>
            Own.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.UserId">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UserLookupMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.UserLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.UserLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.UserLookupMessage.CopyTo(StockSharp.Messages.UserLookupMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.From">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.To">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.IsSubscribe">
            <inheritdoc />
        </member>
        <member name="P:StockSharp.Messages.UserLookupMessage.OriginalTransactionId">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.UserPermissions">
            <summary>
            Available permissions which customer receives for work with data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.Save">
            <summary>
            Market-data downloading.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.Load">
            <summary>
            Market-data downloading.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.Delete">
            <summary>
            Data deletion.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.SecurityLookup">
            <summary>
            Security lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.ExchangeBoardLookup">
            <summary>
            Exchange board lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.EditSecurities">
            <summary>
            Edit securities.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.EditBoards">
            <summary>
            Edit boards.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.DeleteSecurities">
            <summary>
            Delete securities.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.DeleteBoards">
            <summary>
            Delete boards.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.GetUsers">
            <summary>
            Get users.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.EditUsers">
            <summary>
            Edit users.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.DeleteUsers">
            <summary>
            Delete users.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.ServerManage">
            <summary>
            Restart.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.Trading">
            <summary>
            Trading.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UserPermissions.Withdraw">
            <summary>
            Withdraw.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.UserRequestMessage">
            <summary>
            User request message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserRequestMessage.Login">
            <summary>
            Login.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserRequestMessage.Id">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.UserRequestMessage.DataType">
            <inheritdoc />
        </member>
        <member name="M:StockSharp.Messages.UserRequestMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.UserRequestMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UserRequestMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.UserRequestMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.UserRequestMessage.CopyTo(StockSharp.Messages.UserRequestMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, to which copied information.</param>
            <returns>The object, to which copied information.</returns>
        </member>
        <member name="M:StockSharp.Messages.UserRequestMessage.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.WithdrawTypes">
            <summary>
            Withdraw types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.WithdrawTypes.Crypto">
            <summary>
            Cryptocurrency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.WithdrawTypes.BankWire">
            <summary>
            Bank wire.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.WithdrawTypes.BankCard">
            <summary>
            Bank card.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.BankDetails">
            <summary>
            Bank details.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Account">
            <summary>
            Bank account.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.AccountName">
            <summary>
            Bank account name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Swift">
            <summary>
            Bank SWIFT.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Bic">
            <summary>
            Bank BIC.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Iban">
            <summary>
            IBAN.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.PostalCode">
            <summary>
            Postal code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BankDetails.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BankDetails.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.BankDetails.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.BankDetails.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.WithdrawInfo">
            <summary>
            Withdraw info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.Type">
            <summary>
            Withdraw type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.CryptoAddress">
            <summary>
            Crypto address.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.Express">
            <summary>
            Express withdraw.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.ChargeFee">
            <summary>
            Charge fee.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.PaymentId">
            <summary>
            Payment id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.BankDetails">
            <summary>
            Bank details.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.IntermediaryBankDetails">
            <summary>
            Intermediary bank details.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.CompanyDetails">
            <summary>
            Company details.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.CardNumber">
            <summary>
            Bank card number.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WithdrawInfo.Comment">
            <summary>
            Comment of bank transaction.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WithdrawInfo.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WithdrawInfo.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WithdrawInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.WorkingTime">
            <summary>
            Work schedule (time, holidays etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.WorkingTime"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.IsEnabled">
            <summary>
            Is enabled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.Periods">
            <summary>
            Schedule validity periods.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.SpecialWorkingDays">
            <summary>
            Working days, falling on Saturday and Sunday.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.SpecialHolidays">
            <summary>
            Holidays that fall on workdays.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.SpecialDays">
            <summary>
            Special working days and holidays.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.ToString">
            <inheritdoc />
        </member>
        <member name="T:StockSharp.Messages.WorkingTimePeriod">
            <summary>
            Schedule validity period.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTimePeriod.Till">
            <summary>
            Schedule expiration date.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTimePeriod.Times">
            <summary>
            Work schedule within day.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTimePeriod.SpecialDays">
            <summary>
            Work schedule for days with different from <see cref="P:StockSharp.Messages.WorkingTimePeriod.Times"/> schedules.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.WorkingTimePeriod"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.ToString">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
